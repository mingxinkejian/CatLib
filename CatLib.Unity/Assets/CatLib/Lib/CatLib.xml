<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CatLib</name>
    </assembly>
    <members>
        <member name="T:CatLib.API.Config.IConfigLocator">
            <summary>
            配置定位器
            </summary>
        </member>
        <member name="M:CatLib.API.Config.IConfigLocator.Set(System.String,System.String)">
            <summary>
            设定值
            </summary>
            <param name="name">配置名</param>
            <param name="value">配置值</param>
        </member>
        <member name="M:CatLib.API.Config.IConfigLocator.TryGetValue(System.String,System.String@)">
            <summary>
            根据配置名获取配置的值
            </summary>
            <param name="name">配置名</param>
            <param name="value">配置值</param>
            <returns>是否获取到配置</returns>
        </member>
        <member name="M:CatLib.API.Config.IConfigLocator.Save">
            <summary>
            保存配置
            </summary>
        </member>
        <member name="T:CatLib.API.Config.IConfig">
            <summary>
            配置
            </summary>
        </member>
        <member name="P:CatLib.API.Config.IConfig.Item(System.String)">
            <summary>
            获取值
            </summary>
            <param name="name">配置名</param>
            <returns></returns>
        </member>
        <member name="M:CatLib.API.Config.IConfig.AddConverter(System.Type,CatLib.API.Config.ITypeStringConverter)">
            <summary>
            增加转换器
            </summary>
            <param name="type">类型</param>
            <param name="converter">类型对应转换器</param>
        </member>
        <member name="M:CatLib.API.Config.IConfig.Reg(CatLib.API.Config.IConfigLocator,System.Int32)">
            <summary>
            注册一个配置定位器
            框架会依次遍历配置定位器来获取配置
            </summary>
            <param name="locator">配置定位器</param>
            <param name="priority">查询优先级(值越小越优先)</param>
        </member>
        <member name="M:CatLib.API.Config.IConfig.Set``1(System.String,``0)">
            <summary>
            设定配置的值
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="name">配置名</param>
            <param name="value">配置的值</param>
        </member>
        <member name="M:CatLib.API.Config.IConfig.Get``1(System.String,``0)">
            <summary>
            根据配置名获取配置
            </summary>
            <typeparam name="T">配置最终转换到的类型</typeparam>
            <param name="name">配置所属类型的名字</param>
            <param name="def">当找不到配置时的默认值</param>
            <returns>配置的值，如果找不到则返回默认值</returns>
        </member>
        <member name="T:CatLib.API.Config.IConfigManager">
            <summary>
            配置管理器
            </summary>
        </member>
        <member name="M:CatLib.API.Config.IConfigManager.SetDefault(System.String)">
            <summary>
            设定默认的配置名
            </summary>
            <param name="name">配置名</param>
        </member>
        <member name="T:CatLib.API.Config.ITypeStringConverter">
            <summary>
            字符串转换接口
            </summary>
        </member>
        <member name="M:CatLib.API.Config.ITypeStringConverter.ConvertToString(System.Object)">
            <summary>
            转换目标类型到字符串
            </summary>
            <param name="value">要被转换的对象</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CatLib.API.Config.ITypeStringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            转换自字符串到目标类型
            </summary>
            <param name="value">字符串</param>
            <param name="to">目标类型</param>
            <returns>转换后的目标对象</returns>
        </member>
        <member name="T:CatLib.API.Stl.IContainer">
            <summary>
            容器接口
            </summary>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.GetBind(System.String)">
            <summary>
            获取服务的绑定数据,如果绑定不存在则返回null
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>服务绑定数据或者null</returns>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.HasBind(System.String)">
            <summary>
            是否已经绑定了服务
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>返回一个bool值代表服务是否被绑定</returns>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.IsStatic(System.String)">
            <summary>
            服务是否是静态化的,如果服务不存在也将返回false
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>是否是静态化的</returns>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.Bind(System.String,System.Func{CatLib.API.Stl.IContainer,System.Object[],System.Object},System.Boolean)">
            <summary>
            绑定一个服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实体</param>
            <param name="isStatic">服务是否静态化</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.Bind(System.String,System.Type,System.Boolean)">
            <summary>
            绑定一个服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否静态化</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.BindIf(System.String,System.Func{CatLib.API.Stl.IContainer,System.Object[],System.Object},System.Boolean)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否是静态的</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.BindIf(System.String,System.Type,System.Boolean)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否是静态的</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.Tag(System.String,System.String[])">
            <summary>
            为一个及以上的服务定义一个标记
            </summary>
            <param name="tag">标记名</param>
            <param name="service">服务名</param>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.Tagged(System.String)">
            <summary>
            根据标记名生成标记所对应的所有服务实例
            </summary>
            <param name="tag">标记名</param>
            <returns>将会返回标记所对应的所有服务实例</returns>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.Instance(System.String,System.Object)">
            <summary>
            静态化一个服务
            </summary>
            <param name="service">服务名或者别名</param>
            <param name="instance">服务实例</param>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.Release(System.String)">
            <summary>
            释放某个静态化实例
            </summary>
            <param name="service">服务名或别名</param>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.OnRelease(System.Action{CatLib.API.Stl.IBindData,System.Object})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="action">处理释放时的回调</param>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.Call(System.Object,System.String,System.Object[])">
            <summary>
            以依赖注入形式调用一个方法
            </summary>
            <param name="instance">方法对象</param>
            <param name="method">方法名</param>
            <param name="param">方法参数</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.Call(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            以依赖注入形式调用一个方法
            </summary>
            <param name="instance">方法对象</param>
            <param name="methodInfo">方法信息</param>
            <param name="param">方法参数</param>
            <returns>方法返回值</returns>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.Make(System.String,System.Object[])">
            <summary>
            构造服务
            </summary>
            <param name="service">服务名或别名</param>
            <param name="param">构造参数</param>
            <returns>服务实例，如果构造失败那么返回null</returns>
        </member>
        <member name="P:CatLib.API.Stl.IContainer.Item(System.String)">
            <summary>
            构造服务
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>服务实例，如果构造失败那么返回null</returns>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.Alias(System.String,System.String)">
            <summary>
            为服务设定一个别名
            </summary>
            <param name="alias">别名</param>
            <param name="service">映射到的服务名</param>
            <returns>当前容器对象</returns>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.OnResolving(System.Func{CatLib.API.Stl.IBindData,System.Object,System.Object})">
            <summary>
            当服务被解决时触发的事件
            </summary>
            <param name="func">回调函数</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:CatLib.API.Stl.IContainer.OnFindType(System.Func{System.String,System.Type},System.Int32)">
            <summary>
            当查找类型无法找到时会尝试去调用开发者提供的查找类型函数
            </summary>
            <param name="func">查找类型的回调</param>
            <param name="priority">查询优先级(值越小越优先)</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="T:CatLib.API.Stl.IBindData">
            <summary>
            服务绑定数据
            </summary>
        </member>
        <member name="P:CatLib.API.Stl.IBindData.Service">
            <summary>
            服务名
            </summary>
        </member>
        <member name="P:CatLib.API.Stl.IBindData.Concrete">
            <summary>
            服务实现
            </summary>
        </member>
        <member name="P:CatLib.API.Stl.IBindData.IsStatic">
            <summary>
            是否是静态服务
            </summary>
        </member>
        <member name="M:CatLib.API.Stl.IBindData.Needs(System.String)">
            <summary>
            当需求某个服务                                                                                                                                                                                                                                                                                                                                                                                  
            </summary>
            <param name="service">服务名</param>
            <returns>绑定关系临时数据</returns>
        </member>
        <member name="M:CatLib.API.Stl.IBindData.Needs``1">
            <summary>
            当需求某个服务
            </summary>
            <typeparam name="T">服务类型</typeparam>
            <returns>绑定关系临时数据</returns>
        </member>
        <member name="M:CatLib.API.Stl.IBindData.Alias``1">
            <summary>
            为服务设定一个别名
            </summary>
            <typeparam name="T">别名</typeparam>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.API.Stl.IBindData.Alias(System.String)">
            <summary>
            为服务设定一个别名
            </summary>
            <param name="alias">别名</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.API.Stl.IBindData.OnResolving(System.Func{CatLib.API.Stl.IBindData,System.Object,System.Object})">
            <summary>
            解决服务时触发的回调
            </summary>
            <param name="func">解决事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.API.Stl.IBindData.OnRelease(System.Action{CatLib.API.Stl.IBindData,System.Object})">
            <summary>
            当服务被释放时
            </summary>
            <param name="action">处理事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.API.Stl.IBindData.UnBind">
            <summary>
            移除绑定服务 , 在解除绑定时如果是静态化物体将会触发释放
            </summary>
        </member>
        <member name="T:CatLib.API.Stl.IGivenData">
            <summary>
            绑定关系临时数据,用于支持链式调用
            </summary>
        </member>
        <member name="M:CatLib.API.Stl.IGivenData.Given(System.String)">
            <summary>
            给与什么服务
            </summary>
            <param name="service">给与的服务名或别名</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.API.Stl.IGivenData.Given``1">
            <summary>
            给与什么服务
            </summary>
            <typeparam name="T">给与的服务名或别名</typeparam>
            <returns>服务绑定数据</returns>
        </member>
        <member name="T:CatLib.API.Stl.IManager`1">
            <summary>
            管理器
            </summary>
        </member>
        <member name="M:CatLib.API.Stl.IManager`1.Get(System.String)">
            <summary>
            获取解决方案
            </summary>
            <param name="name">解决方案名</param>
            <returns>解决方案</returns>
        </member>
        <member name="P:CatLib.API.Stl.IManager`1.Item(System.String)">
            <summary>
            获取解决方案
            </summary>
            <param name="name">解决方案名</param>
            <returns>解决方案</returns>
        </member>
        <member name="M:CatLib.API.Stl.IManager`1.Extend(System.Func{`0},System.String)">
            <summary>
            自定义解决方案
            </summary>
            <param name="resolve">解决方案实现</param>
            <param name="name">解决方案名</param>
        </member>
        <member name="T:CatLib.API.Stl.ISingleManager`1">
            <summary>
            管理器
            </summary>
        </member>
        <member name="P:CatLib.API.Stl.ISingleManager`1.Default">
            <summary>
            获取默认的解决方案
            </summary>
        </member>
        <member name="M:CatLib.API.Stl.ISingleManager`1.Release(System.String)">
            <summary>
            释放解决方案
            </summary>
            <param name="name">解决方案名</param>
        </member>
        <member name="T:CatLib.API.Stl.IFilterChain`1">
            <summary>
            过滤器链
            </summary>
            <typeparam name="TIn">输入参数</typeparam>
        </member>
        <member name="P:CatLib.API.Stl.IFilterChain`1.FilterList">
            <summary>
            过滤器列表
            </summary>
        </member>
        <member name="M:CatLib.API.Stl.IFilterChain`1.Add(System.Action{`0,System.Action{`0}},System.Int32)">
            <summary>
            增加过滤器
            </summary>
            <param name="filter">过滤器</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>过滤器链</returns>
        </member>
        <member name="M:CatLib.API.Stl.IFilterChain`1.Do(`0)">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入数据</param>
        </member>
        <member name="M:CatLib.API.Stl.IFilterChain`1.Do(`0,System.Action{`0})">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入数据</param>
            <param name="then">当过滤器执行完成后执行的操作</param>
        </member>
        <member name="T:CatLib.API.Stl.IFilterChain`2">
            <summary>
            过滤器链
            </summary>
            <typeparam name="TIn">输入参数</typeparam>
            <typeparam name="TOut">输出参数</typeparam>
        </member>
        <member name="P:CatLib.API.Stl.IFilterChain`2.FilterList">
            <summary>
            过滤器列表
            </summary>
        </member>
        <member name="M:CatLib.API.Stl.IFilterChain`2.Add(System.Action{`0,`1,System.Action{`0,`1}},System.Int32)">
            <summary>
            增加一个过滤器
            </summary>
            <param name="filter">过滤器</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>过滤器链</returns>
        </member>
        <member name="M:CatLib.API.Stl.IFilterChain`2.Do(`0,`1)">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入参数</param>
            <param name="outData">输出参数</param>
        </member>
        <member name="M:CatLib.API.Stl.IFilterChain`2.Do(`0,`1,System.Action{`0,`1})">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入参数</param>
            <param name="outData">输出参数</param>
            <param name="then">当过滤器执行完成后执行的操作</param>
        </member>
        <member name="T:CatLib.API.Stl.IFilterChain`3">
            <summary>
            过滤器链
            </summary>
            <typeparam name="TIn">输入参数</typeparam>
            <typeparam name="TOut">输出参数</typeparam>
            <typeparam name="TException">输入异常</typeparam>
        </member>
        <member name="P:CatLib.API.Stl.IFilterChain`3.FilterList">
            <summary>
            过滤器列表
            </summary>
        </member>
        <member name="M:CatLib.API.Stl.IFilterChain`3.Add(System.Action{`0,`1,`2,System.Action{`0,`1,`2}},System.Int32)">
            <summary>
            增加一个过滤器
            </summary>
            <param name="filter">过滤器</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>过滤器链</returns>
        </member>
        <member name="M:CatLib.API.Stl.IFilterChain`3.Do(`0,`1,`2)">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入参数</param>
            <param name="outData">输出参数</param>
            <param name="exception">输入异常</param>
        </member>
        <member name="M:CatLib.API.Stl.IFilterChain`3.Do(`0,`1,`2,System.Action{`0,`1,`2})">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入参数</param>
            <param name="outData">输出参数</param>
            <param name="exception">输入异常</param>
            <param name="then">当过滤器执行完成后执行的操作</param>
        </member>
        <member name="T:CatLib.API.Stl.ILruCache`2">
            <summary>
            Lru缓存
            </summary>
            <typeparam name="TKey">键的类型</typeparam>
            <typeparam name="TVal">值的类型</typeparam>
        </member>
        <member name="M:CatLib.API.Stl.ILruCache`2.ReverseForeach">
            <summary>
            反转遍历顺序(并不是反转整个有序集)
            </summary>
        </member>
        <member name="M:CatLib.API.Stl.ILruCache`2.Add(`0,`1)">
            <summary>
            在lru缓存中增加一个元素
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:CatLib.API.Stl.ILruCache`2.Get(`0,`1)">
            <summary>
            根据key获取val，如果被淘汰则返回传入的默认值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认返回值</param>
            <returns>值</returns>
        </member>
        <member name="P:CatLib.API.Stl.ILruCache`2.Count">
            <summary>
            获取Lru缓存中的元素数量
            </summary>
        </member>
        <member name="P:CatLib.API.Stl.ILruCache`2.Item(`0)">
            <summary>
            根据key获取val，如果被淘汰则返回默认值
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="T:CatLib.API.Stl.IQuickList`1">
            <summary>
            快速列表
            </summary>
        </member>
        <member name="P:CatLib.API.Stl.IQuickList`1.Count">
            <summary>
            列表元素基数
            </summary>
        </member>
        <member name="P:CatLib.API.Stl.IQuickList`1.Length">
            <summary>
            快速列表中的结点数量
            </summary>
        </member>
        <member name="M:CatLib.API.Stl.IQuickList`1.Add(`0)">
            <summary>
            将元素插入到列表尾部
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:CatLib.API.Stl.IQuickList`1.Push(`0)">
            <summary>
            将元素插入到列表尾部
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:CatLib.API.Stl.IQuickList`1.UnShift(`0)">
            <summary>
            将元素插入到列表头部
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:CatLib.API.Stl.IQuickList`1.Pop">
            <summary>
            移除并返回列表的尾部元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.API.Stl.IQuickList`1.Shift">
            <summary>
            移除并返回列表头部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.API.Stl.IQuickList`1.Trim(System.Int64,System.Int64)">
            <summary>
            对列表进行修剪，只保留下标范围内的元素
            </summary>
            <param name="start">起始下标</param>
            <param name="end">结束下标</param>
            <returns>移除的元素数量</returns>
        </member>
        <member name="M:CatLib.API.Stl.IQuickList`1.Remove(`0,System.Int64)">
            <summary>
            根据参数 <paramref name="count"/> 的值，移除列表中与参数 <paramref name="element"/> 相等的元素。
            <para><c>count &gt; 0</c> : 从表头开始向表尾搜索，移除与 <paramref name="element"/> 相等的元素，数量为 <paramref name="count"/>。</para>
            <para><c>count &lt; 0</c> : 从表尾开始向表头搜索，移除与 <paramref name="element"/> 相等的元素，数量为绝对值 <paramref name="count"/>。</para>
            <para><c>count = 0</c> : 移除表中所有与 <paramref name="element"/> 相等的元素。</para>
            </summary>
            <param name="element">要被移除的元素</param>
            <param name="count">移除的元素数量，使用正负来决定扫描起始位置，如果<paramref name="count"/>为0则全部匹配的元素，反之移除指定数量。</param>
            <returns>被移除元素的数量</returns>
        </member>
        <member name="M:CatLib.API.Stl.IQuickList`1.GetRange(System.Int64,System.Int64)">
            <summary>
            获取区间内的所有元素,1个元素占1个位置，范围不允许使用负数表示
            </summary>
            <param name="start">起始位置(包含)</param>
            <param name="end">结束位置(包含)</param>
            <returns>区间内的元素列表</returns>
        </member>
        <member name="P:CatLib.API.Stl.IQuickList`1.Item(System.Int64)">
            <summary>
            通过下标访问元素,如果传入的是一个负数下标那么从末尾开始查找
            </summary>
            <param name="index">下标，允许为负数</param>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.API.Stl.IQuickList`1.InsertAfter(`0,`0)">
            <summary>
            在指定元素之后插入
            </summary>
            <param name="finder">查找的元素</param>
            <param name="insert">要插入的元素</param>
        </member>
        <member name="M:CatLib.API.Stl.IQuickList`1.InsertBefore(`0,`0)">
            <summary>
            在指定元素之前插入
            </summary>
            <param name="finder">查找的元素</param>
            <param name="insert">要插入的元素</param>
        </member>
        <member name="M:CatLib.API.Stl.IQuickList`1.ReverseForeach">
            <summary>
            反转遍历顺序(并不是反转整个列表)
            </summary>
        </member>
        <member name="M:CatLib.API.Stl.IQuickList`1.Clear">
            <summary>
            清空快速列表
            </summary>
        </member>
        <member name="M:CatLib.API.Stl.IQuickList`1.First">
            <summary>
            获取第一个元素
            </summary>
            <returns>第一个元素</returns>
        </member>
        <member name="M:CatLib.API.Stl.IQuickList`1.Last">
            <summary>
            获取最后一个元素
            </summary>
            <returns>最后一个元素</returns>
        </member>
        <member name="T:CatLib.API.Stl.ISortSet`2">
            <summary>
            有序集
            </summary>
            <typeparam name="TElement">元素</typeparam>
            <typeparam name="TScore">分数</typeparam>
        </member>
        <member name="P:CatLib.API.Stl.ISortSet`2.Count">
            <summary>
            有序集的基数
            </summary>
        </member>
        <member name="P:CatLib.API.Stl.ISortSet`2.SyncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.Clear">
            <summary>
            清空SortSet
            </summary>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.Add(`0,`1)">
            <summary>
            插入记录
            </summary>
            <param name="element">元素</param>
            <param name="score">分数</param>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.Contains(`0)">
            <summary>
            是否包含某个元素
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.GetScore(`0)">
            <summary>
            返回有序集的分数
            </summary>
            <param name="element">元素</param>
            <returns>分数，如果元素不存在则返回<c>default(TScore)</c></returns>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.GetRangeCount(`1,`1)">
            <summary>
            获取分数范围内的元素个数
            </summary>
            <param name="start">起始值(包含)</param>
            <param name="end">结束值(包含)</param>
            <returns>分数值在<paramref name="start"/>(包含)和<paramref name="end"/>(包含)之间的元素数量</returns>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.Remove(`0)">
            <summary>
            从有序集中删除元素，如果元素不存在返回false
            </summary>
            <param name="element">元素</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.RemoveRangeByRank(System.Int64,System.Int64)">
            <summary>
            根据排名区间移除区间内的元素
            </summary>
            <param name="startRank">开始的排名(包含),排名以0为底</param>
            <param name="stopRank">结束的排名(包含),排名以0为底</param>
            <returns>被删除的元素个数</returns>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.RemoveRangeByScore(`1,`1)">
            <summary>
            根据分数区间移除区间内的元素
            </summary>
            <param name="startScore">开始的分数（包含）</param>
            <param name="stopScore">结束的分数（包含）</param>
            <returns>被删除的元素个数</returns>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.GetRank(`0)">
            <summary>
            获取排名 , 有序集成员按照Score从小到大排序
            </summary>
            <param name="element">元素</param>
            <returns>排名排名以0为底，为-1则表示没有找到元素</returns>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.GetRevRank(`0)">
            <summary>
            获取排名，有序集成员按照Score从大到小排序
            </summary>
            <param name="element"></param>
            <returns>排名排名以0为底 , 为-1则表示没有找到元素</returns>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.GetElementRangeByRank(System.Int64,System.Int64)">
            <summary>
            根据排名区间获取区间内的所有元素
            </summary>
            <param name="startRank">开始的排名(包含),排名以0为底</param>
            <param name="stopRank">结束的排名(包含),排名以0为底</param>
            <returns>元素列表</returns>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.GetElementRangeByScore(`1,`1)">
            <summary>
            根据分数区间获取区间内的所有元素
            </summary>
            <param name="startScore">开始的分数（包含）</param>
            <param name="stopScore">结束的分数（包含）</param>
            <returns>元素列表</returns>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.GetElementByRank(System.Int64)">
            <summary>
            根据排名获取元素 (有序集成员按照Score从小到大排序)
            </summary>
            <param name="rank">排名,排名以0为底</param>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.GetElementByRevRank(System.Int64)">
            <summary>
            根据排名获取元素 (有序集成员按照Score从大到小排序)
            </summary>
            <param name="rank">排名,排名以0为底</param>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.ReverseForeach">
            <summary>
            反转遍历顺序(并不是反转整个有序集)
            </summary>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.First">
            <summary>
            获取第一个元素
            </summary>
            <returns>第一个元素</returns>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.Last">
            <summary>
            获取最后一个元素
            </summary>
            <returns>最后一个元素</returns>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.Shift">
            <summary>
            移除并返回有序集头部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.Pop">
            <summary>
            移除并返回有序集尾部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="P:CatLib.API.Stl.ISortSet`2.Item(System.Int64)">
            <summary>
            获取指定排名的元素(有序集成员按照Score从小到大排序)
            </summary>
            <param name="rank">排名,排名以0为底</param>
            <returns>指定的元素</returns>
        </member>
        <member name="M:CatLib.API.Stl.ISortSet`2.ToArray">
            <summary>
            转为数组
            </summary>
            <returns>元素数组</returns>
        </member>
        <member name="T:CatLib.API.ApplicationEvents">
            <summary>
            应用程序事件
            </summary>
        </member>
        <member name="F:CatLib.API.ApplicationEvents.OnIniting">
            <summary>
            当初始化时
            </summary>
        </member>
        <member name="F:CatLib.API.ApplicationEvents.OnInited">
            <summary>
            当初始化结束
            </summary>
        </member>
        <member name="F:CatLib.API.ApplicationEvents.OnProviderProcessing">
            <summary>
            当服务提供商流程开始前
            </summary>
        </member>
        <member name="F:CatLib.API.ApplicationEvents.OnProviderProcessed">
            <summary>
            当服务提供商流程结束
            </summary>
        </member>
        <member name="F:CatLib.API.ApplicationEvents.OnApplicationStartComplete">
            <summary>
            当程序启动完成
            </summary>
        </member>
        <member name="T:CatLib.API.DebugLevels">
            <summary>
            调试等级
            </summary>
        </member>
        <member name="F:CatLib.API.DebugLevels.Prod">
            <summary>
            生产环境
            </summary>
        </member>
        <member name="F:CatLib.API.DebugLevels.Staging">
            <summary>
            仿真环境
            </summary>
        </member>
        <member name="F:CatLib.API.DebugLevels.Dev">
            <summary>
            开发者模式（在移动设备上允许开启调试）
            </summary>
        </member>
        <member name="F:CatLib.API.DebugLevels.Auto">
            <summary>
            自动模式（如果在编辑器模式下则使用开发者模式（非仿真环境）如果发布则使用生产环境）
            </summary>
        </member>
        <member name="T:CatLib.API.EventLevels">
            <summary>
            事件等级
            </summary>
        </member>
        <member name="F:CatLib.API.EventLevels.None">
            <summary>
            不通知
            </summary>
        </member>
        <member name="F:CatLib.API.EventLevels.Self">
            <summary>
            自身对象级通知
            </summary>
        </member>
        <member name="F:CatLib.API.EventLevels.Type">
            <summary>
            类型级通知
            </summary>
        </member>
        <member name="F:CatLib.API.EventLevels.Interface">
            <summary>
            接口级通知
            </summary>
        </member>
        <member name="F:CatLib.API.EventLevels.Global">
            <summary>
            全局通知
            </summary>
        </member>
        <member name="F:CatLib.API.EventLevels.All">
            <summary>
            全部通知
            </summary>
        </member>
        <member name="T:CatLib.API.IBootstrap">
            <summary>
            引导程序接口
            </summary>
        </member>
        <member name="M:CatLib.API.IBootstrap.Bootstrap">
            <summary>
            引导程序接口
            </summary>
        </member>
        <member name="T:CatLib.API.IDestroy">
            <summary>
            当被释放时
            </summary>
        </member>
        <member name="M:CatLib.API.IDestroy.OnDestroy">
            <summary>
            当被释放时调用
            </summary>
        </member>
        <member name="T:CatLib.API.IGuid">
            <summary>
            唯一标识符接口
            </summary>
        </member>
        <member name="P:CatLib.API.IGuid.Guid">
            <summary>
            获取当前类的全局唯一标识符
            </summary>
        </member>
        <member name="T:CatLib.API.ILateUpdate">
            <summary>
            在Update之后调用
            </summary>
        </member>
        <member name="M:CatLib.API.ILateUpdate.LateUpdate">
            <summary>
            LateUpdate时调用
            </summary>
        </member>
        <member name="T:CatLib.API.IStart">
            <summary>
            当启动时
            </summary>
        </member>
        <member name="M:CatLib.API.IStart.Start">
            <summary>
            启动时触发
            </summary>
        </member>
        <member name="T:CatLib.API.IUpdate">
            <summary>
            Update 接口
            </summary>
        </member>
        <member name="M:CatLib.API.IUpdate.Update">
            <summary>
            当Update时调用
            </summary>
        </member>
        <member name="T:CatLib.API.PriorityAttribute">
            <summary>
            执行优先级
            </summary>
        </member>
        <member name="P:CatLib.API.PriorityAttribute.Priorities">
            <summary>
            优先级
            </summary>
        </member>
        <member name="M:CatLib.API.PriorityAttribute.#ctor(System.Int32)">
            <summary>
            优先级(0最高)
            </summary>
            <param name="priority">优先级(0为最优先)</param>
        </member>
        <member name="T:CatLib.API.IApplication">
            <summary>
            应用程序接口
            </summary>
        </member>
        <member name="P:CatLib.API.IApplication.Version">
            <summary>
            CatLib版本号
            </summary>
        </member>
        <member name="M:CatLib.API.IApplication.Bootstrap(System.Type[])">
            <summary>
            引导程序类型
            </summary>
            <param name="bootstraps">引导程序</param>
            <returns>当前应用程序</returns>
        </member>
        <member name="M:CatLib.API.IApplication.Init">
            <summary>
            初始化程序
            </summary>
        </member>
        <member name="M:CatLib.API.IApplication.Register(System.Type)">
            <summary>
            注册服务提供商
            </summary>
            <param name="type">服务提供商类型</param>
        </member>
        <member name="M:CatLib.API.IApplication.GetGuid">
            <summary>
            获取应用程序内的唯一Id
            </summary>
            <returns>运行时的唯一Id</returns>
        </member>
        <member name="P:CatLib.API.IApplication.IsMainThread">
            <summary>
            是否是主线程
            </summary>
        </member>
        <member name="M:CatLib.API.IApplication.MainThread(System.Collections.IEnumerator)">
            <summary>
            在主线程中调用
            </summary>
            <param name="action">协程，执行会处于主线程</param>
        </member>
        <member name="M:CatLib.API.IApplication.MainThread(System.Action)">
            <summary>
            在主线程中调用
            </summary>
            <param name="action">回调，回调的内容会处于主线程</param>
        </member>
        <member name="M:CatLib.API.IApplication.TriggerGlobal(System.String)">
            <summary>
            触发一个全局事件
            </summary>
            <param name="eventName">事件名</param>
            <returns>全局事件</returns>
        </member>
        <member name="M:CatLib.API.IApplication.TriggerGlobal(System.String,System.Object)">
            <summary>
            触发一个全局事件
            </summary>
            <param name="eventName">事件名</param>
            <param name="sender">发送者</param>
            <returns>全局事件</returns>
        </member>
        <member name="M:CatLib.API.IApplication.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            启动协程
            </summary>
            <param name="routine">协程</param>
        </member>
        <member name="M:CatLib.API.IApplication.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            停止协程
            </summary>
            <param name="routine">协程</param>
        </member>
        <member name="M:CatLib.API.IApplication.UnLoad(System.Object)">
            <summary>
            从驱动器中卸载对象
            如果对象使用了增强接口，那么卸载对应增强接口
            从驱动器中卸载对象会引发IDestroy增强接口
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:CatLib.API.IApplication.Load(System.Object)">
            <summary>
            如果对象实现了增强接口那么将对象装载进对应驱动器
            在装载的时候会引发IStart接口
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:CatLib.API.IApplication.GetPriorities(System.Type,System.String)">
            <summary>
            获取优先级，如果存在方法优先级定义那么优先返回方法的优先级
            如果不存在优先级定义那么返回<c>int.MaxValue</c>
            </summary>
            <param name="type">获取优先级的类型</param>
            <param name="method">获取优先级的调用方法</param>
            <returns>优先级</returns>
        </member>
        <member name="T:CatLib.API.IEnv">
            <summary>
            环境
            </summary>
        </member>
        <member name="P:CatLib.API.IEnv.DebugLevel">
            <summary>
            调试等级
            </summary>
        </member>
        <member name="P:CatLib.API.IEnv.AssetPath">
            <summary>
            系统资源路径
            <para>不同的调试等级下对应不同的资源路径</para>
            <para><c>DebugLevels.Prod</c> : 生产环境下将会为<c>Application.persistentDataPath</c>读写目录</para>
            <para><c>DebugLevels.Staging</c> : 仿真环境下将会为<c>StreamingAssets</c>文件夹</para>
            <para><c>DebugLevels.Dev</c> : 开发者环境下将会为<c>Application.dataPath</c>数据路径</para>
            <para>调试等级无论如何设置，脱离编辑器将自动使用<c>Application.persistentDataPath</c>读写目录</para>
            </summary>
        </member>
        <member name="M:CatLib.API.IEnv.SetAssetPath(System.String)">
            <summary>
            设定资源路径，开发者设定的资源路径会覆盖默认的资源路径策略
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="P:CatLib.API.IEnv.Platform">
            <summary>
            当前运行的平台(和编辑器所在平台有关)
            </summary>
        </member>
        <member name="P:CatLib.API.IEnv.SwitchPlatform">
            <summary>
            当前所选择的编译平台
            </summary>
        </member>
        <member name="M:CatLib.API.IEnv.PlatformToName(System.Nullable{UnityEngine.RuntimePlatform})">
            <summary>
            将平台转为名字
            </summary>
            <param name="platform">平台名</param>
            <returns>转换后的名字</returns>
        </member>
        <member name="T:CatLib.API.ExceptionEventArgs">
            <summary>
            异常事件
            </summary>
        </member>
        <member name="P:CatLib.API.ExceptionEventArgs.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="M:CatLib.API.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            异常事件
            </summary>
            <param name="ex">出现的异常</param>
        </member>
        <member name="T:CatLib.API.RuntimeException">
            <summary>
            运行时异常
            </summary>
        </member>
        <member name="M:CatLib.API.RuntimeException.#ctor(System.String)">
            <summary>
            CatLib组件异常
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:CatLib.API.RuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            运行时异常
            </summary>
            <param name="message">异常消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:CatLib.API.IGlobalEvent">
            <summary>
            全局事件
            </summary>
        </member>
        <member name="M:CatLib.API.IGlobalEvent.AppendInterface``1">
            <summary>
            增加事件响应接口
            </summary>
            <typeparam name="T">接口类型</typeparam>
            <returns>全局事件实例</returns>
        </member>
        <member name="M:CatLib.API.IGlobalEvent.AppendInterface(System.Type)">
            <summary>
            增加事件响应接口
            </summary>
            <param name="t">接口类型</param>
            <returns>全局事件实例</returns>
        </member>
        <member name="M:CatLib.API.IGlobalEvent.SetEventLevel(CatLib.API.EventLevels)">
            <summary>
            设定事件等级
            </summary>
            <param name="level">事件等级</param>
            <returns>全局事件实例</returns>
        </member>
        <member name="M:CatLib.API.IGlobalEvent.Trigger(System.EventArgs)">
            <summary>
            触发一个全局事件
            </summary>
            <param name="args">事件参数</param>
        </member>
        <member name="T:CatLib.API.Crypt.DecryptException">
            <summary>
            解析异常
            </summary>
        </member>
        <member name="M:CatLib.API.Crypt.DecryptException.#ctor(System.String)">
            <summary>
            解析异常
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="T:CatLib.API.Crypt.ICrypt">
            <summary>
            加解密
            </summary>
        </member>
        <member name="M:CatLib.API.Crypt.ICrypt.Encrypt(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="str">需要被加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:CatLib.API.Crypt.ICrypt.Decrypt(System.String)">
            <summary>
            解密被加密的字符串
            </summary>
            <param name="str">需要被解密的字符串</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="T:CatLib.API.Event.IEvent">
            <summary>
            事件接口
            </summary>
        </member>
        <member name="P:CatLib.API.Event.IEvent.Event">
            <summary>
            事件实现
            </summary>
        </member>
        <member name="T:CatLib.API.Event.IEventImpl">
            <summary>
            事件实现
            </summary>
        </member>
        <member name="M:CatLib.API.Event.IEventImpl.Trigger(System.String)">
            <summary>
            触发一个事件
            </summary>
            <param name="eventName">事件名称</param>
        </member>
        <member name="M:CatLib.API.Event.IEventImpl.Trigger(System.String,System.EventArgs)">
            <summary>
            触发一个事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="e">事件参数</param>
        </member>
        <member name="M:CatLib.API.Event.IEventImpl.Trigger(System.String,System.Object)">
            <summary>
            触发一个事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="sender">发送者</param>
        </member>
        <member name="M:CatLib.API.Event.IEventImpl.Trigger(System.String,System.Object,System.EventArgs)">
            <summary>
            触发一个事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="sender">发送者</param>
            <param name="e">事件参数</param>
        </member>
        <member name="M:CatLib.API.Event.IEventImpl.On(System.String,System.EventHandler,System.Int32)">
            <summary>
            注册一个事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="handler">事件句柄</param>
            <param name="life">在几次后事件会被自动释放</param>
            <returns>事件句柄</returns>
        </member>
        <member name="M:CatLib.API.Event.IEventImpl.One(System.String,System.EventHandler)">
            <summary>
            注册一个事件，调用一次后就释放
            </summary>
            <param name="eventName">事件名</param>
            <param name="handler">事件句柄</param>
            <returns></returns>
        </member>
        <member name="T:CatLib.API.Event.IEventHandler">
            <summary>
            事件句柄
            </summary>
        </member>
        <member name="M:CatLib.API.Event.IEventHandler.Cancel">
            <summary>
            取消注册的事件
            </summary>
        </member>
        <member name="P:CatLib.API.Event.IEventHandler.Life">
            <summary>
            剩余的调用次数，当为0时事件会被释放
            </summary>
        </member>
        <member name="P:CatLib.API.Event.IEventHandler.IsLife">
            <summary>
            事件是否是有效的
            </summary>
        </member>
        <member name="T:CatLib.API.FileSystem.IDirectory">
            <summary>
            文件夹
            </summary>
        </member>
        <member name="M:CatLib.API.FileSystem.IDirectory.GetList">
            <summary>
            获取文件夹下的文件/文件夹列表（不会迭代子文件夹）
            </summary>
            <returns>指定目录下的文件夹句柄和文件句柄列表</returns>
        </member>
        <member name="T:CatLib.API.FileSystem.IFile">
            <summary>
            文件
            </summary>
        </member>
        <member name="M:CatLib.API.FileSystem.IFile.Write(System.Byte[])">
            <summary>
            写入数据
            如果数据已经存在则覆盖
            </summary>
            <param name="contents">写入数据</param>
        </member>
        <member name="M:CatLib.API.FileSystem.IFile.Read">
            <summary>
            读取文件
            </summary>
            <returns>读取的数据</returns>
        </member>
        <member name="T:CatLib.API.FileSystem.IFileSystem">
            <summary>
            文件系统
            </summary>
        </member>
        <member name="M:CatLib.API.FileSystem.IFileSystem.Exists(System.String)">
            <summary>
            文件或文件夹是否存在
            </summary>
            <param name="path">文件或文件夹是否存在</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:CatLib.API.FileSystem.IFileSystem.Write(System.String,System.Byte[])">
            <summary>
            写入数据
            如果数据已经存在则覆盖
            </summary>
            <param name="path">路径</param>
            <param name="contents">写入数据</param>
        </member>
        <member name="M:CatLib.API.FileSystem.IFileSystem.Read(System.String)">
            <summary>
            读取文件
            </summary>
            <param name="path">路径</param>
            <returns>读取的数据</returns>
        </member>
        <member name="M:CatLib.API.FileSystem.IFileSystem.Move(System.String,System.String)">
            <summary>
            移动文件到指定目录
            </summary>
            <param name="path">旧的文件/文件夹路径</param>
            <param name="newPath">新的文件/文件夹路径</param>
        </member>
        <member name="M:CatLib.API.FileSystem.IFileSystem.Copy(System.String,System.String)">
            <summary>
            复制文件或文件夹到指定路径
            </summary>
            <param name="path">文件或文件夹路径(应该包含文件夹或者文件名)</param>
            <param name="copyPath">复制到的路径(不应该包含文件夹或者文件名)</param>
        </member>
        <member name="M:CatLib.API.FileSystem.IFileSystem.Delete(System.String)">
            <summary>
            删除文件或者文件夹
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:CatLib.API.FileSystem.IFileSystem.MakeDir(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="path">文件夹路径</param>
        </member>
        <member name="M:CatLib.API.FileSystem.IFileSystem.Get(System.String)">
            <summary>
            获取文件/文件夹句柄
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>文件/文件夹句柄</returns>
        </member>
        <member name="M:CatLib.API.FileSystem.IFileSystem.GetSize(System.String)">
            <summary>
            获取文件/文件夹的大小(字节)
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>文件/文件夹的大小</returns>
        </member>
        <member name="M:CatLib.API.FileSystem.IFileSystem.GetAttributes(System.String)">
            <summary>
            获取文件/文件夹属性
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>文件/文件夹属性</returns>
        </member>
        <member name="M:CatLib.API.FileSystem.IFileSystem.GetList(System.String)">
            <summary>
            获取列表（不会迭代子文件夹）
            </summary>
            <param name="path">要获取列表的文件夹路径(如果传入的是一个文件那么将会返回文件自身路径)</param>
            <returns>指定目录下的文件夹句柄和文件句柄列表</returns>
        </member>
        <member name="T:CatLib.API.FileSystem.IHandler">
            <summary>
            句柄
            </summary>
        </member>
        <member name="P:CatLib.API.FileSystem.IHandler.Path">
            <summary>
            文件/文件夹路径
            </summary>
        </member>
        <member name="P:CatLib.API.FileSystem.IHandler.IsExists">
            <summary>
            文件/文件夹是否存在
            </summary>
        </member>
        <member name="M:CatLib.API.FileSystem.IHandler.Rename(System.String)">
            <summary>
            重命名
            </summary>
            <param name="newName">新的文件/文件夹名字</param>
        </member>
        <member name="M:CatLib.API.FileSystem.IHandler.Move(System.String)">
            <summary>
            将文件/文件夹移动到指定路径
            </summary>
            <param name="newPath">移动到的目标路径</param>
        </member>
        <member name="M:CatLib.API.FileSystem.IHandler.Copy(System.String)">
            <summary>
            复制文件或文件夹到指定路径
            </summary>
            <param name="copyPath">复制到的路径(不应该包含文件夹或者文件名)</param>
        </member>
        <member name="M:CatLib.API.FileSystem.IHandler.Delete">
            <summary>
            删除文件或者文件夹
            </summary>
        </member>
        <member name="M:CatLib.API.FileSystem.IHandler.GetAttributes">
            <summary>
            获取文件/文件夹属性
            </summary>
            <returns>文件/文件夹属性</returns>
        </member>
        <member name="P:CatLib.API.FileSystem.IHandler.IsDir">
            <summary>
            是否是文件夹
            </summary>
            <returns>是否是文件夹</returns>
        </member>
        <member name="M:CatLib.API.FileSystem.IHandler.GetSize">
            <summary>
            文件/文件夹大小
            </summary>
        </member>
        <member name="T:CatLib.API.FileSystem.IFileSystemManager">
            <summary>
            文件系统管理器
            </summary>
        </member>
        <member name="M:CatLib.API.FileSystem.IFileSystemManager.Disk(System.String)">
            <summary>
            获取一个文件系统解决方案(磁盘)
            </summary>
            <param name="name">解决方案名</param>
            <returns>文件系统</returns>
        </member>
        <member name="T:CatLib.API.Timer.ITimer">
            <summary>
            计时器
            </summary>
        </member>
        <member name="P:CatLib.API.Timer.ITimer.Queue">
            <summary>
            计时器队列
            </summary>
        </member>
        <member name="M:CatLib.API.Timer.ITimer.Delay(System.Single)">
            <summary>
            延迟指定时间后执行
            </summary>
            <param name="time">延迟时间(秒)</param>
        </member>
        <member name="M:CatLib.API.Timer.ITimer.DelayFrame(System.Int32)">
            <summary>
            延迟指定帧数帧后执行
            </summary>
            <param name="frame">帧数</param>
        </member>
        <member name="M:CatLib.API.Timer.ITimer.Loop(System.Single)">
            <summary>
            循环执行指定时间
            </summary>
            <param name="time">循环时间(秒)</param>
        </member>
        <member name="M:CatLib.API.Timer.ITimer.Loop(System.Func{System.Boolean})">
            <summary>
            循环执行，直到函数返回false
            </summary>
            <param name="loopFunc">循环状态函数</param>
        </member>
        <member name="M:CatLib.API.Timer.ITimer.LoopFrame(System.Int32)">
            <summary>
            循环执行指定帧数
            </summary>
            <param name="frame">循环的帧数</param>
        </member>
        <member name="M:CatLib.API.Timer.ITimer.Interval(System.Single)">
            <summary>
            间隔多少时间执行一次
            执行时的当前帧计算间隔
            </summary>
            <param name="time">间隔的时间</param>
        </member>
        <member name="M:CatLib.API.Timer.ITimer.IntervalFrame(System.Int32)">
            <summary>
            间隔多少帧执行一次
            执行时的当前帧计算间隔
            </summary>
            <param name="frame">间隔的帧数</param>
        </member>
        <member name="T:CatLib.API.Timer.ITimerQueue">
            <summary>
            计时器任务队列
            </summary>
        </member>
        <member name="P:CatLib.API.Timer.ITimerQueue.IsPause">
            <summary>
            是否是暂停的
            </summary>
        </member>
        <member name="M:CatLib.API.Timer.ITimerQueue.OnComplete(System.Action)">
            <summary>
            当队列的所有计时器完成时
            </summary>
            <param name="onComplete">完成时</param>
            <returns>当前组实例</returns>
        </member>
        <member name="T:CatLib.API.Timer.ITimerManager">
            <summary>
            计时器管理器
            </summary>
        </member>
        <member name="M:CatLib.API.Timer.ITimerManager.Make(System.Action)">
            <summary>
            创建一个计时器
            </summary>
            <param name="task">计时器执行的任务</param>
            <returns>计时器</returns>
        </member>
        <member name="M:CatLib.API.Timer.ITimerManager.MakeQueue(System.Action,System.Int32)">
            <summary>
            创建一个计时器队列
            </summary>
            <param name="area">在这个区域中Make的计时器会按照Make顺序加入同一个队列</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>路由器组</returns>
        </member>
        <member name="M:CatLib.API.Timer.ITimerManager.Cancel(CatLib.API.Timer.ITimerQueue)">
            <summary>
            停止计时器队列的运行
            </summary>
            <param name="queue">计时器队列</param>
        </member>
        <member name="M:CatLib.API.Timer.ITimerManager.Pause(CatLib.API.Timer.ITimerQueue)">
            <summary>
            暂停计时器队列
            </summary>
            <param name="queue">计时器队列</param>
        </member>
        <member name="M:CatLib.API.Timer.ITimerManager.Play(CatLib.API.Timer.ITimerQueue)">
            <summary>
            重新开始播放计时器队列
            </summary>
            <param name="queue">计时器队列</param>
        </member>
        <member name="T:CatLib.API.Time.ITimeManager">
            <summary>
            时间服务管理器
            </summary>
        </member>
        <member name="T:CatLib.API.Time.ITime">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.Time">
            <summary>
            从游戏开始到现在所用的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.DeltaTime">
            <summary>
            上一帧到当前帧的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.FixedTime">
            <summary>
            从游戏开始到现在的时间（秒）使用固定时间来更新
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.TimeSinceLevelLoad">
            <summary>
            从当前scene开始到目前为止的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.FixedDeltaTime">
            <summary>
            固定的上一帧到当前帧的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.MaximumDeltaTime">
            <summary>
            能获取最大的上一帧到当前帧的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.SmoothDeltaTime">
            <summary>
            平稳的上一帧到当前帧的时间(秒)，根据前N帧的加权平均值
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.TimeScale">
            <summary>
            时间缩放系数
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.FrameCount">
            <summary>
            总帧数
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.RealtimeSinceStartup">
            <summary>
            自游戏开始后的总时间（暂停也会增加）
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.CaptureFramerate">
            <summary>
            每秒的帧率
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.UnscaledDeltaTime">
            <summary>
            不考虑时间缩放上一帧到当前帧的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.API.Time.ITime.UnscaledTime">
            <summary>
            不考虑时间缩放的从游戏开始到现在的时间
            </summary>
        </member>
        <member name="T:CatLib.API.Flux.IAction">
            <summary>
            行为
            </summary>
        </member>
        <member name="P:CatLib.API.Flux.IAction.Action">
            <summary>
            行为
            </summary>
        </member>
        <member name="P:CatLib.API.Flux.IAction.Payload">
            <summary>
            附加数据
            </summary>
        </member>
        <member name="M:CatLib.API.Flux.IAction.ToString">
            <summary>
            字符串化行为
            </summary>
            <returns></returns>
        </member>
        <member name="T:CatLib.API.Flux.IFluxDispatcher">
            <summary>
            Flux调度器
            </summary>
        </member>
        <member name="P:CatLib.API.Flux.IFluxDispatcher.IsDispatching">
            <summary>
            是否处于调度中
            </summary>
            <returns>是否处于调度中</returns>
        </member>
        <member name="M:CatLib.API.Flux.IFluxDispatcher.On(System.Action{CatLib.API.Flux.IAction})">
            <summary>
            注册一个匿名调度事件
            </summary>
            <param name="action">响应调度事件的回调</param>
        </member>
        <member name="M:CatLib.API.Flux.IFluxDispatcher.On(System.String,System.Action{CatLib.API.Flux.IAction})">
            <summary>
            注册一个调度事件
            </summary>
            <param name="token">标识符</param>
            <param name="action">响应调度事件的回调</param>
        </member>
        <member name="M:CatLib.API.Flux.IFluxDispatcher.Off(System.String)">
            <summary>
            解除调度事件
            </summary>
            <param name="token">标识符</param>
        </member>
        <member name="M:CatLib.API.Flux.IFluxDispatcher.WaitFor(System.String,CatLib.API.Flux.IAction)">
            <summary>
            等待调度器完成另外的调度
            </summary>
            <param name="token">标识符</param>
            <param name="action">行为</param>
        </member>
        <member name="M:CatLib.API.Flux.IFluxDispatcher.Dispatch(System.String,CatLib.API.Flux.IAction)">
            <summary>
            将行为调度到指定标识符的Store中
            </summary>
            <param name="token">标识符</param>
            <param name="action">行为</param>
        </member>
        <member name="M:CatLib.API.Flux.IFluxDispatcher.Dispatch(CatLib.API.Flux.IAction)">
            <summary>
            调度行为
            </summary>
            <param name="action">行为</param>
        </member>
        <member name="T:CatLib.API.Hash.IHash">
            <summary>
            哈希
            </summary>
        </member>
        <member name="P:CatLib.API.Hash.IHash.GenerateSalt">
            <summary>
            盐
            </summary>
        </member>
        <member name="M:CatLib.API.Hash.IHash.Make(System.String)">
            <summary>
            哈希一个输入值
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="M:CatLib.API.Hash.IHash.Check(System.String,System.String)">
            <summary>
            检查是否匹配
            </summary>
            <param name="input">输入值</param>
            <param name="hash">需要验证的hash</param>
            <returns>是否匹配</returns>
        </member>
        <member name="M:CatLib.API.Hash.IHash.FileMd5(System.String)">
            <summary>
            用于计算文件的md5，您不应该用它进行密码等高敏感的hash加密
            </summary>
            <param name="path">文件路径</param>
            <returns>md5加密的值</returns>
        </member>
        <member name="M:CatLib.API.Hash.IHash.StringMd5(System.String)">
            <summary>
            字符串md5，您不应该用它进行密码等高敏感的hash加密
            </summary>
            <param name="input">输入的字符串</param>
            <returns>md5加密的值</returns>
        </member>
        <member name="T:CatLib.API.Resources.IAssetBundle">
            <summary>
            Assetbundle
            </summary>
        </member>
        <member name="M:CatLib.API.Resources.IAssetBundle.LoadAssetBundle(System.String)">
            <summary>
            获取AssetBundle资源包
            </summary>
            <param name="path">资源包路径</param>
            <returns>AssetBundle资源包</returns>
        </member>
        <member name="M:CatLib.API.Resources.IAssetBundle.LoadAssetBundleAsync(System.String,System.Action{UnityEngine.AssetBundle})">
            <summary>
            获取AssetBundle资源包
            </summary>
            <param name="path">资源包路径</param>
            <param name="callback">加载完成的回调</param>
            <returns>协程</returns>
        </member>
        <member name="M:CatLib.API.Resources.IAssetBundle.LoadAsset(System.String)">
            <summary>
            加载资源
            </summary>
            <param name="path">加载路径</param>
            <returns>加载的对象</returns>
        </member>
        <member name="M:CatLib.API.Resources.IAssetBundle.LoadAssetAll(System.String)">
            <summary>
            加载全部资源
            </summary>
            <param name="path">加载路径</param>
            <returns></returns>
        </member>
        <member name="M:CatLib.API.Resources.IAssetBundle.LoadAssetAsync(System.String,System.Action{UnityEngine.Object})">
            <summary>
            加载资源（异步） 
            </summary>
            <param name="path">资源路径</param>
            <param name="callback">回调</param>
            <returns>协程</returns>
        </member>
        <member name="M:CatLib.API.Resources.IAssetBundle.LoadAssetAllAsync(System.String,System.Action{UnityEngine.Object[]})">
            <summary>
            加载资源（异步） 
            </summary>
            <param name="path">资源路径</param>
            <param name="callback">回调</param>
            <returns>协程</returns>
        </member>
        <member name="M:CatLib.API.Resources.IAssetBundle.UnloadAll">
            <summary>
            强制卸载全部资源包（一般情况请不要调用）
            </summary>
        </member>
        <member name="M:CatLib.API.Resources.IAssetBundle.UnloadAssetBundle(System.String)">
            <summary>
            卸载指定资源包
            </summary>
            <param name="assetbundlePath">资源包路径</param>
        </member>
        <member name="T:CatLib.API.Resources.IObject">
            <summary>
            对象信息
            </summary>
        </member>
        <member name="M:CatLib.API.Resources.IObject.Instantiate">
            <summary>
            实例化对象
            </summary>
            <returns>GameObject</returns>
        </member>
        <member name="M:CatLib.API.Resources.IObject.Get``1(System.Object)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">转换的类型</typeparam>
            <param name="hostedObject">宿主</param>
            <returns>获取对象</returns>
        </member>
        <member name="M:CatLib.API.Resources.IObject.Get(System.Object)">
            <summary>
            获取对象
            </summary>
            <param name="hostedObject">宿主</param>
            <returns>获取对象</returns>
        </member>
        <member name="P:CatLib.API.Resources.IObject.Original">
            <summary>
            原始对象，注意这个访问将不会引用计数
            </summary>
        </member>
        <member name="T:CatLib.API.Resources.IResources">
            <summary>
            资源
            </summary>
        </member>
        <member name="M:CatLib.API.Resources.IResources.AddExtension(System.Type,System.String)">
            <summary>
            增加后缀关系
            </summary>
            <param name="type">类型</param>
            <param name="extension">对应后缀</param>
        </member>
        <member name="M:CatLib.API.Resources.IResources.Load(System.String,CatLib.API.Resources.LoadTypes)">
            <summary>
            加载资源
            </summary>
            <param name="path">资源路径</param>
            <param name="loadType">加载类型</param>
            <returns>加载的对象</returns>
        </member>
        <member name="M:CatLib.API.Resources.IResources.Load(System.String,System.Type,CatLib.API.Resources.LoadTypes)">
            <summary>
            加载资源
            </summary>
            <param name="path">资源路径</param>
            <param name="type">资源类型</param>
            <param name="loadType">加载类型</param>
            <returns>加载的对象</returns>
        </member>
        <member name="M:CatLib.API.Resources.IResources.Load``1(System.String,CatLib.API.Resources.LoadTypes)">
            <summary>
            加载资源
            </summary>
            <typeparam name="T">资源类型</typeparam>
            <param name="path">资源路径</param>
            <param name="loadType">加载类型</param>
            <returns>加载的对象</returns>
        </member>
        <member name="M:CatLib.API.Resources.IResources.LoadAll(System.String,CatLib.API.Resources.LoadTypes)">
            <summary>
            加载全部
            </summary>
            <param name="path">资源路径</param>
            <param name="loadType">加载类型</param>
            <returns>加载的对象数组</returns>
        </member>
        <member name="M:CatLib.API.Resources.IResources.LoadAsync(System.String,System.Action{CatLib.API.Resources.IObject},CatLib.API.Resources.LoadTypes)">
            <summary>
            异步加载
            </summary>
            <param name="path">加载路径</param>
            <param name="callback">回调</param>
            <param name="loadType">加载类型</param>
            <returns>协程</returns>
        </member>
        <member name="M:CatLib.API.Resources.IResources.LoadAsync(System.String,System.Type,System.Action{CatLib.API.Resources.IObject},CatLib.API.Resources.LoadTypes)">
            <summary>
            异步加载
            </summary>
            <param name="path">加载路径</param>
            <param name="type">资源类型</param>
            <param name="callback">回调</param>
            <param name="loadType">加载类型</param>
            <returns>协程</returns>
        </member>
        <member name="M:CatLib.API.Resources.IResources.LoadAsync``1(System.String,System.Action{CatLib.API.Resources.IObject},CatLib.API.Resources.LoadTypes)">
            <summary>
            异步加载
            </summary>
            <typeparam name="T">资源类型</typeparam>
            <param name="path">加载路径</param>
            <param name="callback">回调</param>
            <param name="loadType">加载类型</param>
            <returns>协程</returns>
        </member>
        <member name="M:CatLib.API.Resources.IResources.LoadAllAsync(System.String,System.Action{CatLib.API.Resources.IObject[]},CatLib.API.Resources.LoadTypes)">
            <summary>
            异步加载全部资源
            </summary>
            <param name="path">资源路径</param>
            <param name="callback">回调</param>
            <param name="loadType">加载类型</param>
            <returns>协程</returns>
        </member>
        <member name="T:CatLib.API.Resources.LoadTypes">
            <summary>
            加载类型
            </summary>
        </member>
        <member name="F:CatLib.API.Resources.LoadTypes.Resources">
            <summary>
            从 Resources 中加载
            </summary>
        </member>
        <member name="F:CatLib.API.Resources.LoadTypes.AssetBundle">
            <summary>
            从 AssetBundle中 加载
            </summary>
        </member>
        <member name="T:CatLib.API.Routing.IMiddleware">
            <summary>
            中间件
            </summary>
        </member>
        <member name="P:CatLib.API.Routing.IMiddleware.Middleware">
            <summary>
            路由请求过滤链
            </summary>
        </member>
        <member name="T:CatLib.API.Routing.RoutedAttribute">
            <summary>
            路由标记
            </summary>
        </member>
        <member name="P:CatLib.API.Routing.RoutedAttribute.Group">
            <summary>
            路由组
            </summary>
        </member>
        <member name="P:CatLib.API.Routing.RoutedAttribute.Where">
            <summary>
            条件
            </summary>
        </member>
        <member name="P:CatLib.API.Routing.RoutedAttribute.Defaults">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:CatLib.API.Routing.RoutedAttribute.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="M:CatLib.API.Routing.RoutedAttribute.#ctor">
            <summary>
            路由
            </summary>
        </member>
        <member name="M:CatLib.API.Routing.RoutedAttribute.#ctor(System.String)">
            <summary>
            路由路径
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:CatLib.API.Routing.IRequest">
            <summary>
            请求
            </summary>
        </member>
        <member name="P:CatLib.API.Routing.IRequest.Uri">
            <summary>
            Uri
            </summary>
        </member>
        <member name="M:CatLib.API.Routing.IRequest.GetContext">
            <summary>
            上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:CatLib.API.Routing.IRequest.Segment(System.Int32,System.String)">
            <summary>
            构成uri路径段的数组
            </summary>
            <param name="index">下标</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:CatLib.API.Routing.IRequest.Get(System.String,System.String)">
            <summary>
            获取字符串附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="P:CatLib.API.Routing.IRequest.Item(System.String)">
            <summary>
            获取字符串附加物
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.API.Routing.IRequest.GetString(System.String,System.String)">
            <summary>
            获取字符串附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.API.Routing.IRequest.GetInt(System.String,System.Int32)">
            <summary>
            获取整型的附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.API.Routing.IRequest.GetLong(System.String,System.Int64)">
            <summary>
            获取长整型的附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.API.Routing.IRequest.GetShort(System.String,System.Int16)">
            <summary>
            获取短整型的附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.API.Routing.IRequest.GetChar(System.String,System.Char)">
            <summary>
            获取字符的附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.API.Routing.IRequest.GetFloat(System.String,System.Single)">
            <summary>
            获取浮点数的附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.API.Routing.IRequest.GetDouble(System.String,System.Double)">
            <summary>
            获取双精度浮点数的附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.API.Routing.IRequest.GetBoolean(System.String,System.Boolean)">
            <summary>
            获取布尔值的附加物
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:CatLib.API.Routing.IResponse">
            <summary>
            响应
            </summary>
        </member>
        <member name="M:CatLib.API.Routing.IResponse.GetContext">
            <summary>
            获取上下文
            </summary>
            <returns>上下文</returns>
        </member>
        <member name="M:CatLib.API.Routing.IResponse.SetContext(System.Object)">
            <summary>
            设定上下文
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:CatLib.API.Routing.IRoute">
            <summary>
            路由条目
            </summary>
        </member>
        <member name="M:CatLib.API.Routing.IRoute.Group(System.String)">
            <summary>
            将当前路由条目追加到指定路由组中
            </summary>
            <param name="name">名字</param>
            <returns>路由条目实例</returns>
        </member>
        <member name="M:CatLib.API.Routing.IRoute.Defaults(System.String,System.String,System.Boolean)">
            <summary>
            设定默认值
            </summary>
            <param name="name">参数名</param>
            <param name="val">默认值</param>
            <param name="overrided">是否覆盖</param>
            <returns>路由条目实例</returns>
        </member>
        <member name="M:CatLib.API.Routing.IRoute.Where(System.String,System.String,System.Boolean)">
            <summary>
            约束指定参数必须符合指定模式才会被路由
            </summary>
            <param name="name">名字</param>
            <param name="pattern">约束参数</param>
            <param name="overrided">是否覆盖</param>
            <returns>路由条目实例</returns>
        </member>
        <member name="M:CatLib.API.Routing.IRoute.Middleware(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse}},System.Int32)">
            <summary>
            路由中间件
            </summary>
            <param name="middleware">执行的处理函数</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>路由条目实例</returns>
        </member>
        <member name="M:CatLib.API.Routing.IRoute.OnError(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception}},System.Int32)">
            <summary>
            当路由出现错误时
            </summary>
            <param name="onError">执行的处理函数</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>路由条目实例</returns>
        </member>
        <member name="T:CatLib.API.Routing.IRouteGroup">
            <summary>
            路由组
            </summary>
        </member>
        <member name="M:CatLib.API.Routing.IRouteGroup.AddRoute(CatLib.API.Routing.IRoute)">
            <summary>
            增加路由条目到路由组中
            </summary>
            <param name="route">路由条目</param>
            <returns>当前路由组实例</returns>
        </member>
        <member name="M:CatLib.API.Routing.IRouteGroup.Defaults(System.String,System.String)">
            <summary>
            设定参数的默认值
            </summary>
            <param name="name">参数名</param>
            <param name="val">参数值</param>
            <returns>当前路由组实例</returns>
        </member>
        <member name="M:CatLib.API.Routing.IRouteGroup.Where(System.String,System.String)">
            <summary>
            约束指定参数必须符合正则表达式
            </summary>
            <param name="name">参数名</param>
            <param name="pattern">约束的正则表达式</param>
            <returns>当前路由组实例</returns>
        </member>
        <member name="M:CatLib.API.Routing.IRouteGroup.Middleware(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse}},System.Int32)">
            <summary>
            添加路由中间件
            </summary>
            <param name="middleware">中间件</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前路由组实例</returns>
        </member>
        <member name="M:CatLib.API.Routing.IRouteGroup.OnError(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception}},System.Int32)">
            <summary>
            当路由出现错误时
            </summary>
            <param name="onError">错误处理函数</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前路由组实例</returns>
        </member>
        <member name="T:CatLib.API.Routing.IRouter">
            <summary>
            路由接口
            </summary>
        </member>
        <member name="M:CatLib.API.Routing.IRouter.Reg(System.String,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse})">
            <summary>
            根据回调行为注册一个路由
            </summary>
            <param name="uri">统一资源标识符</param>
            <param name="action">行为</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.API.Routing.IRouter.Reg(System.String,System.Type,System.String)">
            <summary>
            根据控制器的type和调用的方法名字注册一个路由
            </summary>
            <param name="uri">uri</param>
            <param name="controller">控制器类型</param>
            <param name="func">调用的方法名</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.API.Routing.IRouter.SetDefaultScheme(System.String)">
            <summary>
            设定默认的scheme
            </summary>
            <param name="scheme">默认的scheme</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.API.Routing.IRouter.OnNotFound(System.Action{CatLib.API.Routing.IRequest,System.Action{CatLib.API.Routing.IRequest}},System.Int32)">
            <summary>
            当路由没有找到时
            </summary>
            <param name="middleware">中间件</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.API.Routing.IRouter.Middleware(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse}},System.Int32)">
            <summary>
            全局路由中间件
            </summary>
            <param name="middleware">中间件</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前路由器实例</returns>
        </member>
        <member name="M:CatLib.API.Routing.IRouter.OnError(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception}},System.Int32)">
            <summary>
            当路由出现错误时
            </summary>
            <param name="middleware">错误处理函数</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.API.Routing.IRouter.Dispatch(System.String,System.Object)">
            <summary>
            调度路由
            </summary>
            <param name="uri">路由地址</param>
            <param name="context">上下文</param>
            <returns>请求响应</returns>
        </member>
        <member name="M:CatLib.API.Routing.IRouter.Group(System.String)">
            <summary>
            建立或者获取一个已经建立的路由组
            </summary>
            <param name="name">路由组名字</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.API.Routing.IRouter.Group(System.Action,System.String)">
            <summary>
            建立匿名路由组，调用的闭包内为路由组有效范围, 允许给定一个名字来显示命名路由组
            </summary>
            <param name="area">区域</param>
            <param name="name">路由组名字</param>
            <returns>当前实例</returns>
        </member>
        <member name="T:CatLib.API.Thread.ITask">
            <summary>
            线程任务
            </summary>
        </member>
        <member name="M:CatLib.API.Thread.ITask.Delay(System.Single)">
            <summary>
            延迟多少秒执行这个线程
            </summary>
            <param name="time">延迟秒数</param>
            <returns>线程任务实例</returns>
        </member>
        <member name="M:CatLib.API.Thread.ITask.OnComplete(System.Action)">
            <summary>
            当线程任务完成时
            </summary>
            <param name="onComplete">完成时的回调</param>
            <returns>线程任务实例</returns>
        </member>
        <member name="M:CatLib.API.Thread.ITask.OnComplete(System.Action{System.Object})">
            <summary>
            当线程任务完成时
            </summary>
            <param name="onComplete">完成时的回调</param>
            <returns>线程任务实例</returns>
        </member>
        <member name="M:CatLib.API.Thread.ITask.OnError(System.Action{System.Exception})">
            <summary>
            当线程执行过程时抛出异常
            </summary>
            <param name="onError">当异常时</param>
            <returns>线程任务实例</returns>
        </member>
        <member name="M:CatLib.API.Thread.ITask.Start">
            <summary>
            启动线程任务
            </summary>
            <returns></returns>
        </member>
        <member name="T:CatLib.API.Thread.ITaskHandler">
            <summary>
            线程任务句柄
            </summary>
        </member>
        <member name="M:CatLib.API.Thread.ITaskHandler.Cancel">
            <summary>
            撤销线程执行，只有在delay状态才能撤销
            </summary>
        </member>
        <member name="T:CatLib.API.Thread.IThread">
            <summary>
            多线程运行器
            </summary>
        </member>
        <member name="M:CatLib.API.Thread.IThread.Task(System.Action)">
            <summary>
            新建一个多线程任务
            </summary>
            <param name="task">任务内容</param>
            <returns>任务</returns>
        </member>
        <member name="M:CatLib.API.Thread.IThread.Task(System.Func{System.Object})">
            <summary>
            新建一个多线程任务允许产生回调
            </summary>
            <param name="task">任务内容</param>
            <returns>任务</returns>
        </member>
        <member name="T:CatLib.InjectAttribute">
            <summary>
            注入标记
            </summary>
        </member>
        <member name="P:CatLib.InjectAttribute.Alias">
            <summary>
            注入服务的别名或者服务名
            </summary>
        </member>
        <member name="P:CatLib.InjectAttribute.Required">
            <summary>
            是否是必须的
            如果约束为必须当依赖注入失败时则会引发一个异常
            </summary>
        </member>
        <member name="M:CatLib.InjectAttribute.#ctor(System.String)">
            <summary>
            声明注入
            </summary>
            <param name="alias">依赖服务的别名或者服务名</param>
        </member>
        <member name="M:CatLib.InjectAttribute.#ctor">
            <summary>
            声明注入
            </summary>
        </member>
        <member name="T:CatLib.Config.ConfigManager">
            <summary>
            配置管理器
            </summary>
        </member>
        <member name="F:CatLib.Config.ConfigManager.defaultName">
            <summary>
            默认的配置名字
            </summary>
        </member>
        <member name="M:CatLib.Config.ConfigManager.SetDefault(System.String)">
            <summary>
            设定默认的配置名字
            </summary>
            <param name="name">默认配置名字</param>
        </member>
        <member name="M:CatLib.Config.ConfigManager.GetDefaultName">
            <summary>
            获取默认的配置名字
            </summary>
            <returns>默认的文件系统名字</returns>
        </member>
        <member name="T:CatLib.Config.UnitySettingLocator">
            <summary>
            Unity设置定位器
            </summary>
        </member>
        <member name="F:CatLib.Config.UnitySettingLocator.dict">
            <summary>
            配置字典
            </summary>
        </member>
        <member name="M:CatLib.Config.UnitySettingLocator.#ctor">
            <summary>
            配置定位器
            </summary>
        </member>
        <member name="M:CatLib.Config.UnitySettingLocator.Set(System.String,System.String)">
            <summary>
            设定值
            </summary>
            <param name="name">配置名</param>
            <param name="value">配置值</param>
        </member>
        <member name="M:CatLib.Config.UnitySettingLocator.TryGetValue(System.String,System.String@)">
            <summary>
            根据配置名获取配置的值
            </summary>
            <param name="name">配置名</param>
            <param name="value">配置值</param>
            <returns>是否获取到配置</returns>
        </member>
        <member name="M:CatLib.Config.UnitySettingLocator.Save">
            <summary>
            保存配置
            </summary>
        </member>
        <member name="T:CatLib.Config.CodeConfigLocator">
            <summary>
            代码配置定位器
            </summary>
        </member>
        <member name="F:CatLib.Config.CodeConfigLocator.dict">
            <summary>
            配置字典
            </summary>
        </member>
        <member name="M:CatLib.Config.CodeConfigLocator.#ctor">
            <summary>
            代码配置定位器
            </summary>
        </member>
        <member name="M:CatLib.Config.CodeConfigLocator.Set(System.String,System.String)">
            <summary>
            设定值
            </summary>
            <param name="name">配置名</param>
            <param name="value">配置值</param>
        </member>
        <member name="M:CatLib.Config.CodeConfigLocator.TryGetValue(System.String,System.String@)">
            <summary>
            根据配置名获取配置的值
            </summary>
            <param name="name">配置名</param>
            <param name="value">配置值</param>
            <returns>是否获取到配置</returns>
        </member>
        <member name="M:CatLib.Config.CodeConfigLocator.Save">
            <summary>
            保存配置
            </summary>
        </member>
        <member name="T:CatLib.Config.Config">
            <summary>
            配置容器
            </summary>
        </member>
        <member name="F:CatLib.Config.Config.locators">
            <summary>
            配置定位器
            </summary>
        </member>
        <member name="F:CatLib.Config.Config.typeStringConverters">
            <summary>
            类型转换器
            </summary>
        </member>
        <member name="M:CatLib.Config.Config.#ctor">
            <summary>
            构造一个配置容器
            </summary>
        </member>
        <member name="M:CatLib.Config.Config.AddConverter(System.Type,CatLib.API.Config.ITypeStringConverter)">
            <summary>
            增加转换器
            </summary>
            <param name="type">类型对应的转换器</param>
            <param name="converter">转换器</param>
        </member>
        <member name="M:CatLib.Config.Config.Reg(CatLib.API.Config.IConfigLocator,System.Int32)">
            <summary>
            注册一个配置定位器
            框架会依次遍历配置定位器来获取配
            </summary>
            <param name="locator">配置定位器</param>
            <param name="priority">查询优先级(值越小越优先)</param>
        </member>
        <member name="M:CatLib.Config.Config.Save">
            <summary>
            保存配置
            </summary>
        </member>
        <member name="P:CatLib.Config.Config.Item(System.String)">
            <summary>
            根据配置名获取配置
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Config.Config.Set``1(System.String,``0)">
            <summary>
            设定配置的值
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="name">配置名</param>
            <param name="value">配置的值</param>
        </member>
        <member name="M:CatLib.Config.Config.Get``1(System.String,``0)">
            <summary>
            根据配置名获取配置
            </summary>
            <typeparam name="T">配置最终转换到的类型</typeparam>
            <param name="name">配置所属类型的名字</param>
            <param name="def">当找不到配置时的默认值</param>
            <returns>配置的值，如果找不到则返回默认值</returns>
        </member>
        <member name="T:CatLib.Config.ConfigProvider">
            <summary>
            配置服务提供商
            </summary>
        </member>
        <member name="M:CatLib.Config.ConfigProvider.Register">
            <summary>
            注册配置服务
            </summary>
        </member>
        <member name="M:CatLib.Config.ConfigProvider.RegisterManager">
            <summary>
            注册管理器
            </summary>
        </member>
        <member name="M:CatLib.Config.ConfigProvider.RegisterConfig">
            <summary>
            注册配置
            </summary>
        </member>
        <member name="M:CatLib.Config.ConfigProvider.RegisterLocator">
            <summary>
            注册定位器
            </summary>
        </member>
        <member name="T:CatLib.Config.BoolStringConverter">
            <summary>
            bool转换器
            </summary>
        </member>
        <member name="M:CatLib.Config.BoolStringConverter.ConvertToString(System.Object)">
            <summary>
            转换目标类型到字符串
            </summary>
            <param name="value">要被转换的对象</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CatLib.Config.BoolStringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            转换自字符串到目标类型
            </summary>
            <param name="value">字符串</param>
            <param name="to">目标类型</param>
            <returns>转换后的目标对象</returns>
        </member>
        <member name="T:CatLib.Config.ByteStringConverter">
            <summary>
            byte转换器
            </summary>
        </member>
        <member name="M:CatLib.Config.ByteStringConverter.ConvertToString(System.Object)">
            <summary>
            转换目标类型到字符串
            </summary>
            <param name="value">要被转换的对象</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CatLib.Config.ByteStringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            转换自字符串到目标类型
            </summary>
            <param name="value">字符串</param>
            <param name="to">目标类型</param>
            <returns>转换后的目标对象</returns>
        </member>
        <member name="T:CatLib.Config.CharStringConverter">
            <summary>
            Char转换器
            </summary>
        </member>
        <member name="M:CatLib.Config.CharStringConverter.ConvertToString(System.Object)">
            <summary>
            转换目标类型到字符串
            </summary>
            <param name="value">要被转换的对象</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CatLib.Config.CharStringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            转换自字符串到目标类型
            </summary>
            <param name="value">字符串</param>
            <param name="to">目标类型</param>
            <returns>转换后的目标对象</returns>
        </member>
        <member name="T:CatLib.Config.DateTimeStringConverter">
            <summary>
            时间转换
            </summary>
        </member>
        <member name="M:CatLib.Config.DateTimeStringConverter.ConvertToString(System.Object)">
            <summary>
            转换目标类型到字符串
            </summary>
            <param name="value">要被转换的对象</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CatLib.Config.DateTimeStringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            转换自字符串到目标类型
            </summary>
            <param name="value">字符串</param>
            <param name="to">目标类型</param>
            <returns>转换后的目标对象</returns>
        </member>
        <member name="T:CatLib.Config.DecimalStringConverter">
            <summary>
            decimal转换
            </summary>
        </member>
        <member name="M:CatLib.Config.DecimalStringConverter.ConvertToString(System.Object)">
            <summary>
            转换目标类型到字符串
            </summary>
            <param name="value">要被转换的对象</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CatLib.Config.DecimalStringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            转换自字符串到目标类型
            </summary>
            <param name="value">字符串</param>
            <param name="to">目标类型</param>
            <returns>转换后的目标对象</returns>
        </member>
        <member name="T:CatLib.Config.DoubleStringConverter">
            <summary>
            double转换
            </summary>
        </member>
        <member name="M:CatLib.Config.DoubleStringConverter.ConvertToString(System.Object)">
            <summary>
            转换目标类型到字符串
            </summary>
            <param name="value">要被转换的对象</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CatLib.Config.DoubleStringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            转换自字符串到目标类型
            </summary>
            <param name="value">字符串</param>
            <param name="to">目标类型</param>
            <returns>转换后的目标对象</returns>
        </member>
        <member name="T:CatLib.Config.EnumStringConverter">
            <summary>
            枚举类型转换
            </summary>
        </member>
        <member name="M:CatLib.Config.EnumStringConverter.ConvertToString(System.Object)">
            <summary>
            转换目标类型到字符串
            </summary>
            <param name="value">要被转换的对象</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CatLib.Config.EnumStringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            转换自字符串到目标类型
            </summary>
            <param name="value">字符串</param>
            <param name="to">目标类型</param>
            <returns>转换后的目标对象</returns>
        </member>
        <member name="T:CatLib.Config.Int16StringConverter">
            <summary>
            int16（short）转换
            </summary>
        </member>
        <member name="M:CatLib.Config.Int16StringConverter.ConvertToString(System.Object)">
            <summary>
            转换目标类型到字符串
            </summary>
            <param name="value">要被转换的对象</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CatLib.Config.Int16StringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            转换自字符串到目标类型
            </summary>
            <param name="value">字符串</param>
            <param name="to">目标类型</param>
            <returns>转换后的目标对象</returns>
        </member>
        <member name="T:CatLib.Config.Int32StringConverter">
            <summary>
            Int32转换
            </summary>
        </member>
        <member name="M:CatLib.Config.Int32StringConverter.ConvertToString(System.Object)">
            <summary>
            转换目标类型到字符串
            </summary>
            <param name="value">要被转换的对象</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CatLib.Config.Int32StringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            转换自字符串到目标类型
            </summary>
            <param name="value">字符串</param>
            <param name="to">目标类型</param>
            <returns>转换后的目标对象</returns>
        </member>
        <member name="T:CatLib.Config.Int64StringConverter">
            <summary>
            Int64(long)转换
            </summary>
        </member>
        <member name="M:CatLib.Config.Int64StringConverter.ConvertToString(System.Object)">
            <summary>
            转换目标类型到字符串
            </summary>
            <param name="value">要被转换的对象</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CatLib.Config.Int64StringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            转换自字符串到目标类型
            </summary>
            <param name="value">字符串</param>
            <param name="to">目标类型</param>
            <returns>转换后的目标对象</returns>
        </member>
        <member name="T:CatLib.Config.SByteStringConverter">
            <summary>
            sbyte转换
            </summary>
        </member>
        <member name="M:CatLib.Config.SByteStringConverter.ConvertToString(System.Object)">
            <summary>
            转换目标类型到字符串
            </summary>
            <param name="value">要被转换的对象</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CatLib.Config.SByteStringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            转换自字符串到目标类型
            </summary>
            <param name="value">字符串</param>
            <param name="to">目标类型</param>
            <returns>转换后的目标对象</returns>
        </member>
        <member name="T:CatLib.Config.SingleStringConverter">
            <summary>
            float转换
            </summary>
        </member>
        <member name="M:CatLib.Config.SingleStringConverter.ConvertToString(System.Object)">
            <summary>
            转换目标类型到字符串
            </summary>
            <param name="value">要被转换的对象</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CatLib.Config.SingleStringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            转换自字符串到目标类型
            </summary>
            <param name="value">字符串</param>
            <param name="to">目标类型</param>
            <returns>转换后的目标对象</returns>
        </member>
        <member name="T:CatLib.Config.StringStringConverter">
            <summary>
            字符串转换
            </summary>
        </member>
        <member name="M:CatLib.Config.StringStringConverter.ConvertToString(System.Object)">
            <summary>
            转换目标类型到字符串
            </summary>
            <param name="value">要被转换的对象</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CatLib.Config.StringStringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            转换自字符串到目标类型
            </summary>
            <param name="value">字符串</param>
            <param name="to">目标类型</param>
            <returns>转换后的目标对象</returns>
        </member>
        <member name="T:CatLib.Config.UInt16StringConverter">
            <summary>
            ushort转换
            </summary>
        </member>
        <member name="M:CatLib.Config.UInt16StringConverter.ConvertToString(System.Object)">
            <summary>
            转换目标类型到字符串
            </summary>
            <param name="value">要被转换的对象</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CatLib.Config.UInt16StringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            转换自字符串到目标类型
            </summary>
            <param name="value">字符串</param>
            <param name="to">目标类型</param>
            <returns>转换后的目标对象</returns>
        </member>
        <member name="T:CatLib.Config.UInt32StringConverter">
            <summary>
            unit转换
            </summary>
        </member>
        <member name="M:CatLib.Config.UInt32StringConverter.ConvertToString(System.Object)">
            <summary>
            转换目标类型到字符串
            </summary>
            <param name="value">要被转换的对象</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CatLib.Config.UInt32StringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            转换自字符串到目标类型
            </summary>
            <param name="value">字符串</param>
            <param name="to">目标类型</param>
            <returns>转换后的目标对象</returns>
        </member>
        <member name="T:CatLib.Config.UInt64StringConverter">
            <summary>
            ulong转换
            </summary>
        </member>
        <member name="M:CatLib.Config.UInt64StringConverter.ConvertToString(System.Object)">
            <summary>
            转换目标类型到字符串
            </summary>
            <param name="value">要被转换的对象</param>
            <returns>转换后的字符串</returns>
        </member>
        <member name="M:CatLib.Config.UInt64StringConverter.ConvertFromString(System.String,System.Type)">
            <summary>
            转换自字符串到目标类型
            </summary>
            <param name="value">字符串</param>
            <param name="to">目标类型</param>
            <returns>转换后的目标对象</returns>
        </member>
        <member name="T:CatLib.Config.ConverterException">
            <summary>
            转换异常
            </summary>
        </member>
        <member name="M:CatLib.Config.ConverterException.#ctor(System.String)">
            <summary>
            转换异常
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:CatLib.Config.ConverterException.#ctor(System.String,System.Type)">
            <summary>
            转换异常
            </summary>
            <param name="field">异常字段</param>
            <param name="to">转换的类型</param>
        </member>
        <member name="T:CatLib.Facade.ConfigManager">
            <summary>
            配置管理器
            </summary>
        </member>
        <member name="T:CatLib.Facade.FileSystemManager">
            <summary>
            文件系统管理器
            </summary>
        </member>
        <member name="T:CatLib.Facade.Router">
            <summary>
            路由
            </summary>
        </member>
        <member name="T:CatLib.Facade.TimeManager">
            <summary>
            时间管理器
            </summary>
        </member>
        <member name="T:CatLib.Facade.TimerManager">
            <summary>
            计时器管理器
            </summary>
        </member>
        <member name="T:CatLib.FileSystem.Local">
            <summary>
            本地驱动器
            </summary>
        </member>
        <member name="F:CatLib.FileSystem.Local.root">
            <summary>
            根目录
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.Local.#ctor(System.String)">
            <summary>
            构建一个本地驱动器
            </summary>
            <param name="root">根目录</param>
        </member>
        <member name="M:CatLib.FileSystem.Local.Exists(System.String)">
            <summary>
            文件或文件夹是否存在
            </summary>
            <param name="path">文件或文件夹是否存在</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:CatLib.FileSystem.Local.Write(System.String,System.Byte[])">
            <summary>
            写入数据
            如果数据已经存在则覆盖
            </summary>
            <param name="path">路径</param>
            <param name="contents">写入数据</param>
        </member>
        <member name="M:CatLib.FileSystem.Local.Read(System.String)">
            <summary>
            读取文件
            </summary>
            <param name="path">路径</param>
            <returns>读取的数据</returns>
        </member>
        <member name="M:CatLib.FileSystem.Local.Move(System.String,System.String)">
            <summary>
            移动文件到指定目录(可以被用于重命名)
            </summary>
            <param name="path">旧的文件/文件夹路径</param>
            <param name="newPath">新的文件/文件夹路径</param>
        </member>
        <member name="M:CatLib.FileSystem.Local.Copy(System.String,System.String)">
            <summary>
            复制文件或文件夹到指定路径
            </summary>
            <param name="path">文件或文件夹路径(应该包含文件夹或者文件名)</param>
            <param name="copyPath">复制到的路径(不应该包含文件夹或者文件名)</param>
        </member>
        <member name="M:CatLib.FileSystem.Local.Delete(System.String)">
            <summary>
            删除文件或者文件夹
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:CatLib.FileSystem.Local.MakeDir(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="path">文件夹路径</param>
        </member>
        <member name="M:CatLib.FileSystem.Local.GetAttributes(System.String)">
            <summary>
            获取文件/文件夹属性
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>文件/文件夹属性</returns>
        </member>
        <member name="M:CatLib.FileSystem.Local.GetList(System.String)">
            <summary>
            获取列表（不会迭代子文件夹）
            </summary>
            <param name="path">要获取列表的路径</param>
            <returns>指定目录下的文件夹和文件列表</returns>
        </member>
        <member name="M:CatLib.FileSystem.Local.GetSize(System.String)">
            <summary>
            获取文件/文件夹的大小(字节)
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>文件/文件夹的大小</returns>
        </member>
        <member name="M:CatLib.FileSystem.Local.IsDir(System.String)">
            <summary>
            是否是文件夹
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>是否是文件夹</returns>
        </member>
        <member name="M:CatLib.FileSystem.Local.Normalize(System.String)">
            <summary>
            标准化路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:CatLib.FileSystem.Local.GuardLimitedRoot(System.String)">
            <summary>
            判断限定范围是否在root下
            </summary>
            <param name="path">绝对路径</param>
        </member>
        <member name="M:CatLib.FileSystem.Local.EnsureDirectory(System.String)">
            <summary>
            保证目录存在
            </summary>
            <param name="root">路径</param>
        </member>
        <member name="T:CatLib.FileSystem.Directory">
            <summary>
            文件夹
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.Directory.#ctor(CatLib.FileSystem.FileSystem,System.String)">
            <summary>
            文件夹
            </summary>
            <param name="fileSystem">文件系统</param>
            <param name="path">文件夹路径</param>
        </member>
        <member name="M:CatLib.FileSystem.Directory.GetList">
            <summary>
            获取文件夹下的文件/文件夹列表（不会迭代子文件夹）
            </summary>
            <returns>指定目录下的文件夹句柄和文件句柄列表</returns>
        </member>
        <member name="T:CatLib.FileSystem.File">
            <summary>
            文件
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.File.#ctor(CatLib.FileSystem.FileSystem,System.String)">
            <summary>
            文件
            </summary>
            <param name="fileSystem">文件系统</param>
            <param name="path">文件路径</param>
        </member>
        <member name="M:CatLib.FileSystem.File.Write(System.Byte[])">
            <summary>
            写入数据
            如果数据已经存在则覆盖
            </summary>
            <param name="contents">写入数据</param>
        </member>
        <member name="M:CatLib.FileSystem.File.Read">
            <summary>
            读取文件
            </summary>
            <returns>读取的数据</returns>
        </member>
        <member name="T:CatLib.FileSystem.FileSystem">
            <summary>
            文件系统
            </summary>
        </member>
        <member name="F:CatLib.FileSystem.FileSystem.adapter">
            <summary>
            文件系统适配器
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.#ctor(CatLib.FileSystem.IFileSystemAdapter)">
            <summary>
            文件系统
            </summary>
            <param name="adapter">适配器</param>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.Exists(System.String)">
            <summary>
            文件或文件夹是否存在
            </summary>
            <param name="path">文件或文件夹是否存在</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.Write(System.String,System.Byte[])">
            <summary>
            写入数据
            如果数据已经存在则覆盖
            </summary>
            <param name="path">路径</param>
            <param name="contents">写入数据</param>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.Read(System.String)">
            <summary>
            读取文件
            </summary>
            <param name="path">路径</param>
            <returns>读取的数据</returns>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.Move(System.String,System.String)">
            <summary>
            移动文件到指定目录
            </summary>
            <param name="path">旧的文件/文件夹路径</param>
            <param name="newPath">新的文件/文件夹路径</param>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.Copy(System.String,System.String)">
            <summary>
            复制文件或文件夹到指定路径
            </summary>
            <param name="path">文件或文件夹路径(应该包含文件夹或者文件名)</param>
            <param name="copyPath">复制到的路径(不应该包含文件夹或者文件名)</param>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.Delete(System.String)">
            <summary>
            删除文件或者文件夹
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.MakeDir(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="path">文件夹路径</param>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.GetAttributes(System.String)">
            <summary>
            获取文件/文件夹属性
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>文件/文件夹属性</returns>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.GetSize(System.String)">
            <summary>
            获取文件/文件夹的大小(字节)
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>文件/文件夹的大小</returns>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.Get(System.String)">
            <summary>
            获取文件/文件夹句柄
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>文件/文件夹句柄</returns>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.GetList(System.String)">
            <summary>
            获取列表（不会迭代子文件夹）
            </summary>
            <param name="path">要获取列表的文件夹路径(如果传入的是一个文件那么将会返回文件自身路径)</param>
            <returns>指定目录下的文件夹句柄和文件句柄列表</returns>
        </member>
        <member name="M:CatLib.FileSystem.FileSystem.IsDir(System.String)">
            <summary>
            是否是文件夹
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>是否是文件夹</returns>
        </member>
        <member name="T:CatLib.FileSystem.FileSystemProvider">
            <summary>
            文件系统服务提供商
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.FileSystemProvider.OnProviderProcess">
            <summary>
            服务提供商进程
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.FileSystem.FileSystemProvider.Register">
            <summary>
            注册文件系统服务
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.FileSystemProvider.RegisterManager">
            <summary>
            注册管理器
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.FileSystemProvider.RegisterAdapter">
            <summary>
            注册适配器
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.FileSystemProvider.InitRegisterLocalDriver">
            <summary>
            初始化本地磁盘驱动
            </summary>
        </member>
        <member name="T:CatLib.FileSystem.Handler">
            <summary>
            文件/文件夹句柄
            </summary>
        </member>
        <member name="F:CatLib.FileSystem.Handler.path">
            <summary>
            文件/文件夹路径
            </summary>
        </member>
        <member name="P:CatLib.FileSystem.Handler.Path">
            <summary>
            文件/文件夹路径
            </summary>
        </member>
        <member name="F:CatLib.FileSystem.Handler.fileSystem">
            <summary>
            文件系统
            </summary>
        </member>
        <member name="P:CatLib.FileSystem.Handler.FileSystem">
            <summary>
            文件系统
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.Handler.#ctor(CatLib.FileSystem.FileSystem,System.String)">
            <summary>
            构造一个文件文件夹句柄
            </summary>
            <param name="fileSystem">文件系统</param>
            <param name="path">文件/文件夹路径</param>
        </member>
        <member name="M:CatLib.FileSystem.Handler.Copy(System.String)">
            <summary>
            复制文件或文件夹到指定路径
            </summary>
            <param name="copyPath">复制到的路径(不应该包含文件夹或者文件名)</param>
        </member>
        <member name="M:CatLib.FileSystem.Handler.Delete">
            <summary>
            删除文件或者文件夹
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.Handler.Rename(System.String)">
            <summary>
            重命名
            </summary>
            <param name="newName">新的文件/文件夹名字</param>
        </member>
        <member name="M:CatLib.FileSystem.Handler.Move(System.String)">
            <summary>
            将文件/文件夹移动到指定路径
            </summary>
            <param name="newPath">移动到的目标路径</param>
        </member>
        <member name="P:CatLib.FileSystem.Handler.IsExists">
            <summary>
            文件/文件夹是否存在
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.Handler.GetAttributes">
            <summary>
            获取文件/文件夹属性
            </summary>
            <returns>文件/文件夹属性</returns>
        </member>
        <member name="P:CatLib.FileSystem.Handler.IsDir">
            <summary>
            是否是文件夹
            </summary>
            <returns>是否是文件夹</returns>
        </member>
        <member name="M:CatLib.FileSystem.Handler.GetSize">
            <summary>
            获取文件/文件夹大小(字节)
            </summary>
            <returns>文件/文件夹大小</returns>
        </member>
        <member name="T:CatLib.FileSystem.IFileSystemAdapter">
            <summary>
            文件系统适配器
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.IFileSystemAdapter.Exists(System.String)">
            <summary>
            文件或文件夹是否存在
            </summary>
            <param name="path">文件或文件夹是否存在</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:CatLib.FileSystem.IFileSystemAdapter.Write(System.String,System.Byte[])">
            <summary>
            写入数据
            如果数据已经存在则覆盖
            </summary>
            <param name="path">路径</param>
            <param name="contents">写入数据</param>
        </member>
        <member name="M:CatLib.FileSystem.IFileSystemAdapter.Read(System.String)">
            <summary>
            读取文件
            </summary>
            <param name="path">路径</param>
            <returns>读取的数据</returns>
        </member>
        <member name="M:CatLib.FileSystem.IFileSystemAdapter.Move(System.String,System.String)">
            <summary>
            移动文件到指定目录
            </summary>
            <param name="path">旧的文件/文件夹路径</param>
            <param name="newPath">新的文件/文件夹路径</param>
        </member>
        <member name="M:CatLib.FileSystem.IFileSystemAdapter.Copy(System.String,System.String)">
            <summary>
            复制文件或文件夹到指定路径
            </summary>
            <param name="path">文件或文件夹路径(应该包含文件夹或者文件名)</param>
            <param name="copyPath">复制到的路径(不应该包含文件夹或者文件名)</param>
        </member>
        <member name="M:CatLib.FileSystem.IFileSystemAdapter.Delete(System.String)">
            <summary>
            删除文件或者文件夹
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:CatLib.FileSystem.IFileSystemAdapter.MakeDir(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="path">文件夹路径</param>
        </member>
        <member name="M:CatLib.FileSystem.IFileSystemAdapter.GetAttributes(System.String)">
            <summary>
            获取文件/文件夹属性
            </summary>
            <param name="path">文件/文件夹路径</param>
            <returns>文件/文件夹属性</returns>
        </member>
        <member name="M:CatLib.FileSystem.IFileSystemAdapter.GetList(System.String)">
            <summary>
            获取列表（不会迭代子文件夹）
            </summary>
            <param name="path">要获取列表的文件夹路径(如果传入的是一个文件那么将会返回文件自身路径)</param>
            <returns>指定目录下的文件夹和文件列表</returns>
        </member>
        <member name="M:CatLib.FileSystem.IFileSystemAdapter.GetSize(System.String)">
            <summary>
            获取文件/文件夹的大小(字节)
            </summary>
            <param name="path">文件/文件夹的路径</param>
            <returns>文件/文件夹的大小</returns>
        </member>
        <member name="T:CatLib.FileSystem.FileSystemManager">
            <summary>
            文件系统管理器
            </summary>
        </member>
        <member name="F:CatLib.FileSystem.FileSystemManager.configManager">
            <summary>
            配置
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.FileSystemManager.#ctor(CatLib.API.Config.IConfigManager)">
            <summary>
            文件系统管理器
            </summary>
        </member>
        <member name="M:CatLib.FileSystem.FileSystemManager.Disk(System.String)">
            <summary>
            获取一个文件系统(磁盘)
            </summary>
            <param name="name">名字</param>
            <returns>文件系统</returns>
        </member>
        <member name="M:CatLib.FileSystem.FileSystemManager.GetDefaultName">
            <summary>
            获取默认的文件系统名字
            </summary>
            <returns>默认的文件系统名字</returns>
        </member>
        <member name="T:CatLib.Routing.DispatchEventArgs">
            <summary>
            调度事件
            </summary>
        </member>
        <member name="P:CatLib.Routing.DispatchEventArgs.Route">
            <summary>
            异常
            </summary>
        </member>
        <member name="P:CatLib.Routing.DispatchEventArgs.Request">
            <summary>
            请求
            </summary>
        </member>
        <member name="M:CatLib.Routing.DispatchEventArgs.#ctor(CatLib.API.Routing.IRoute,CatLib.API.Routing.IRequest)">
            <summary>
            请求
            </summary>
            <param name="route">路由</param>
            <param name="request">请求</param>
        </member>
        <member name="T:CatLib.Routing.RouterEvents">
            <summary>
            路由事件
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouterEvents.OnBeforeRouterAttrCompiler">
            <summary>
            当属性路由编译之前
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouterEvents.OnDispatcher">
            <summary>
            当路由调度之前
            </summary>
        </member>
        <member name="T:CatLib.Routing.DomainException">
            <summary>
            参数范围及域异常
            </summary>
        </member>
        <member name="M:CatLib.Routing.DomainException.#ctor(System.String)">
            <summary>
            创建一个参数范围及域异常
            </summary>
            <param name="message">错误描述</param>
        </member>
        <member name="T:CatLib.Routing.NotFoundRouteException">
            <summary>
            未能找到路由条目
            </summary>
        </member>
        <member name="M:CatLib.Routing.NotFoundRouteException.#ctor(System.String)">
            <summary>
            未能找到路由条目
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="T:CatLib.Routing.NotFoundSchemeException">
            <summary>
            未能找到 Scheme
            </summary>
        </member>
        <member name="M:CatLib.Routing.NotFoundSchemeException.#ctor(System.String)">
            <summary>
            未能找到 Scheme
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="T:CatLib.Routing.RouterConfigException">
            <summary>
            路由配置异常
            </summary>
        </member>
        <member name="M:CatLib.Routing.RouterConfigException.#ctor(System.String)">
            <summary>
            路由配置异常
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="T:CatLib.Routing.UndefinedDefaultSchemeException">
            <summary>
            未定义默认的Scheme
            </summary>
        </member>
        <member name="M:CatLib.Routing.UndefinedDefaultSchemeException.#ctor(System.String)">
            <summary>
            未定义默认的Scheme
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="T:CatLib.Routing.AttrRouteCompiler">
            <summary>
            属性路由编译器
            </summary>
        </member>
        <member name="F:CatLib.Routing.AttrRouteCompiler.router">
            <summary>
            路由器
            </summary>
        </member>
        <member name="F:CatLib.Routing.AttrRouteCompiler.routed">
            <summary>
            被路由的特性标记
            </summary>
        </member>
        <member name="F:CatLib.Routing.AttrRouteCompiler.buildRecord">
            <summary>
            编译记录
            </summary>
        </member>
        <member name="F:CatLib.Routing.AttrRouteCompiler.controllerFuncBuildRecord">
            <summary>
            控制器编译记录
            </summary>
        </member>
        <member name="F:CatLib.Routing.AttrRouteCompiler.stripping">
            <summary>
            是否剥离当前程序集
            </summary>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.#ctor(CatLib.Routing.Router)">
            <summary>
            属性路由编译器
            </summary>
            <param name="router">路由器</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.OnStripping(System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            根据回调返回结果来决定是否对当前程序集进行属性路由扫描
            </summary>
            <param name="stripping">回调返回true表示跳过该程序集扫描</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.Complie">
            <summary>
            编译属性路由
            </summary>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ComplieRouted(System.Type)">
            <summary>
            编译属性路由
            </summary>
            <param name="type">编译类型</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ComplieController(System.Type,CatLib.API.Routing.RoutedAttribute)">
            <summary>
            编译控制器
            </summary>
            <param name="type">控制器类型</param>
            <param name="baseRouted">控制器路由标记</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ComplieFunction(System.Type,System.Reflection.MethodInfo,CatLib.API.Routing.RoutedAttribute)">
            <summary>
            编译函数
            </summary>
            <param name="controllerType">控制器类型</param>
            <param name="method">方法信息</param>
            <param name="baseRouted">控制器路由标记</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.CheckRepeat(System.String,System.Type,System.Reflection.MethodInfo)">
            <summary>
            检查是否重复编译
            </summary>
            <param name="path">编译路径</param>
            <param name="controllerType">控制器类型</param>
            <param name="method">编译方法</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ComplieOptions(CatLib.API.Routing.IRoute,CatLib.API.Routing.RoutedAttribute)">
            <summary>
            编译配置信息
            </summary>
            <param name="route">路由条目</param>
            <param name="routed">路由特性</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ComplieOptionsGroup(CatLib.API.Routing.IRoute,CatLib.API.Routing.RoutedAttribute)">
            <summary>
            增加组信息
            </summary>
            <param name="route">路由条目</param>
            <param name="routed">路由特性</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ComplieOptionsWhere(CatLib.API.Routing.IRoute,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            增加where信息
            </summary>
            <param name="route">路由条目</param>
            <param name="routed">路由特性</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ComplieOptionsDefaults(CatLib.API.Routing.IRoute,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            增加defaults信息
            </summary>
            <param name="route">路由条目</param>
            <param name="routed">路由特性</param>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ComplieDirection(System.String)">
            <summary>
            编译指向语法
            </summary>
            <param name="input">输入的字符串</param>
            <returns>解析的指向语法</returns>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.IsStripping(System.Reflection.Assembly)">
            <summary>
            程序集是否是被剥离的
            </summary>
            <param name="assembly">资源集</param>
            <returns>是否过滤</returns>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.ClassOrFunctionNameToRouteName(System.String)">
            <summary>
            类名或者方法名转为路由名
            </summary>
            <param name="name">名字</param>
            <returns>路由名</returns>
        </member>
        <member name="M:CatLib.Routing.AttrRouteCompiler.HasScheme(System.String)">
            <summary>
            是否包含scheme
            </summary>
            <param name="uri">输入值</param>
        </member>
        <member name="T:CatLib.Routing.CompiledRoute">
            <summary>
            编译后的路由信息
            </summary>
        </member>
        <member name="P:CatLib.Routing.CompiledRoute.StaticPrefix">
            <summary>
            静态文本
            </summary>
        </member>
        <member name="P:CatLib.Routing.CompiledRoute.RouteRegex">
            <summary>
            路由匹配表达式
            </summary>
        </member>
        <member name="P:CatLib.Routing.CompiledRoute.Tokens">
            <summary>
            所有需要匹配的变量单独的正则匹配式
            </summary>
        </member>
        <member name="P:CatLib.Routing.CompiledRoute.PathVariables">
            <summary>
            路径中的变量
            </summary>
        </member>
        <member name="P:CatLib.Routing.CompiledRoute.HostRegex">
            <summary>
            匹配host的表达式
            </summary>
        </member>
        <member name="P:CatLib.Routing.CompiledRoute.HostTokens">
            <summary>
            host部分的需要匹配变量单独的正则表达式
            </summary>
        </member>
        <member name="P:CatLib.Routing.CompiledRoute.HostVariables">
            <summary>
            匹配host的的变量名
            </summary>
        </member>
        <member name="P:CatLib.Routing.CompiledRoute.Variables">
            <summary>
            所有的变量列表
            </summary>
        </member>
        <member name="M:CatLib.Routing.CompiledRoute.ToString">
            <summary>
            转为字符串
            </summary>
            <returns>编译后的字符串表示信息</returns>
        </member>
        <member name="T:CatLib.Routing.Request">
            <summary>
            请求
            </summary>
        </member>
        <member name="F:CatLib.Routing.Request.uri">
            <summary>
            统一资源标识符
            </summary>
        </member>
        <member name="F:CatLib.Routing.Request.route">
            <summary>
            使用的路由
            </summary>
        </member>
        <member name="P:CatLib.Routing.Request.Route">
            <summary>
            属于的路由器
            </summary>
        </member>
        <member name="F:CatLib.Routing.Request.parameters">
            <summary>
            参数表
            </summary>
        </member>
        <member name="P:CatLib.Routing.Request.Uri">
            <summary>
            Uri
            </summary>
        </member>
        <member name="P:CatLib.Routing.Request.RouteUri">
            <summary>
            Uri
            </summary>
        </member>
        <member name="F:CatLib.Routing.Request.context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:CatLib.Routing.Request.#ctor(System.String,System.Object)">
            <summary>
            构建一个请求
            </summary>
            <param name="uri"></param>
            <param name="context"></param>
        </member>
        <member name="M:CatLib.Routing.Request.Segment(System.Int32,System.String)">
            <summary>
            构成uri路径段的数组
            </summary>
            <param name="index">下标</param>
            <param name="defaultValue">默认值</param>
            <returns>路径段值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetContext">
            <summary>
            获取上下文
            </summary>
            <returns>请求上下文</returns>
        </member>
        <member name="M:CatLib.Routing.Request.Get(System.String,System.String)">
            <summary>
            获取字符串附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="P:CatLib.Routing.Request.Item(System.String)">
            <summary>
            获取字符串附加物
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetString(System.String,System.String)">
            <summary>
            获取字符串附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetInt(System.String,System.Int32)">
            <summary>
            获取整型的附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetLong(System.String,System.Int64)">
            <summary>
            获取长整型的附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetShort(System.String,System.Int16)">
            <summary>
            获取短整型的附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetChar(System.String,System.Char)">
            <summary>
            获取字符的附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetFloat(System.String,System.Single)">
            <summary>
            获取浮点数的附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetDouble(System.String,System.Double)">
            <summary>
            获取双精度浮点数的附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.GetBoolean(System.String,System.Boolean)">
            <summary>
            获取布尔值的附加物
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Routing.Request.SetParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            设定参数
            </summary>
            <param name="parameters">参数字典</param>
        </member>
        <member name="M:CatLib.Routing.Request.AddParameters(System.String,System.String)">
            <summary>
            增加参数
            </summary>
            <param name="key">键</param>
            <param name="val">值</param>
        </member>
        <member name="M:CatLib.Routing.Request.SetRoute(CatLib.Routing.Route)">
            <summary>
            设定路由方案
            </summary>
            <param name="route">路由方案</param>
            <returns></returns>
        </member>
        <member name="T:CatLib.Routing.Response">
            <summary>
            响应
            </summary>
        </member>
        <member name="F:CatLib.Routing.Response.context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:CatLib.Routing.Response.GetContext">
            <summary>
            设定上下文
            </summary>
            <returns>上下文</returns>
        </member>
        <member name="M:CatLib.Routing.Response.SetContext(System.Object)">
            <summary>
            设定上下文
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="T:CatLib.Routing.Route">
            <summary>
            路由条目
            </summary>
        </member>
        <member name="F:CatLib.Routing.Route.validators">
            <summary>
            验证器
            </summary>
        </member>
        <member name="F:CatLib.Routing.Route.uri">
            <summary>
            统一资源标识
            </summary>
        </member>
        <member name="P:CatLib.Routing.Route.Uri">
            <summary>
            统一资源标识
            </summary>
        </member>
        <member name="F:CatLib.Routing.Route.router">
            <summary>
            路由器
            </summary>
        </member>
        <member name="F:CatLib.Routing.Route.options">
            <summary>
            路由配置
            </summary>
        </member>
        <member name="P:CatLib.Routing.Route.Options">
            <summary>
            路由配置
            </summary>
        </member>
        <member name="F:CatLib.Routing.Route.compiled">
            <summary>
            编译后的路由器信息
            </summary>
        </member>
        <member name="P:CatLib.Routing.Route.Compiled">
            <summary>
            编译后的路由器信息
            </summary>
        </member>
        <member name="F:CatLib.Routing.Route.container">
            <summary>
            容器
            </summary>
        </member>
        <member name="F:CatLib.Routing.Route.action">
            <summary>
            路由行为
            </summary>
        </member>
        <member name="M:CatLib.Routing.Route.#ctor(CatLib.Routing.Uri,CatLib.Routing.RouteAction)">
            <summary>
            创建一个新的路由条目
            </summary>
            <param name="uri">uri信息</param>
            <param name="action">路由行为</param>
        </member>
        <member name="M:CatLib.Routing.Route.SetContainer(CatLib.API.Stl.IContainer)">
            <summary>
            设定容器
            </summary>
            <param name="container">容器</param>
            <returns>当前路由条目</returns>
        </member>
        <member name="M:CatLib.Routing.Route.SetRouter(CatLib.Routing.Router)">
            <summary>
            设定路由器
            </summary>
            <param name="router">路由器</param>
            <returns>当前路由条目</returns>
        </member>
        <member name="M:CatLib.Routing.Route.GetDefaults(System.String,System.String)">
            <summary>
            获取参数默认值
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:CatLib.Routing.Route.GetWhere(System.String)">
            <summary>
            获取筛选条件
            </summary>
            <param name="varName">参数名</param>
            <returns>筛选条件</returns>
        </member>
        <member name="M:CatLib.Routing.Route.GetValidators">
            <summary>
            获取验证器列表
            </summary>
            <returns>验证器列表</returns>
        </member>
        <member name="M:CatLib.Routing.Route.Where(System.String,System.String,System.Boolean)">
            <summary>
            约束指定参数必须符合指定模式才会被路由
            </summary>
            <param name="name">名字</param>
            <param name="pattern">约束参数</param>
            <param name="overrided">是否覆盖</param>
            <returns>路由条目实例</returns>
        </member>
        <member name="M:CatLib.Routing.Route.Defaults(System.String,System.String,System.Boolean)">
            <summary>
            设定默认值
            </summary>
            <param name="name">参数名</param>
            <param name="val">默认值</param>
            <param name="overrided">是否覆盖</param>
            <returns>路由条目实例</returns>
        </member>
        <member name="M:CatLib.Routing.Route.Group(System.String)">
            <summary>
            将当前路由条目追加到指定路由组中
            </summary>
            <param name="name">名字</param>
            <returns>路由条目实例</returns>
        </member>
        <member name="M:CatLib.Routing.Route.OnError(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception}},System.Int32)">
            <summary>
            当路由出现错误时
            </summary>
            <param name="onError">执行的处理函数</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>路由条目实例</returns>
        </member>
        <member name="M:CatLib.Routing.Route.Middleware(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse}},System.Int32)">
            <summary>
            路由中间件
            </summary>
            <param name="middleware">执行的处理函数</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>路由条目实例</returns>
        </member>
        <member name="M:CatLib.Routing.Route.Run(CatLib.Routing.Request,CatLib.Routing.Response)">
            <summary>
            执行请求
            </summary>
            <param name="request">请求</param>
            <param name="response">响应</param>
            <returns>响应</returns>
        </member>
        <member name="M:CatLib.Routing.Route.GatherMiddleware">
            <summary>
            获取路由的中间件
            </summary>
            <returns>中间件过滤器链</returns>
        </member>
        <member name="M:CatLib.Routing.Route.GatherOnError">
            <summary>
            获取当出现错误时的过滤器链
            </summary>
            <returns>错误过滤器链</returns>
        </member>
        <member name="M:CatLib.Routing.Route.Matches(CatLib.Routing.Request)">
            <summary>
            当前路由条目是否符合请求
            </summary>
            <param name="request">请求</param>
            <returns>是否符合</returns>
        </member>
        <member name="M:CatLib.Routing.Route.DispatchToAction(CatLib.Routing.Request,CatLib.Routing.Response)">
            <summary>
            调度到行为
            </summary>
            <param name="request">请求</param>
            <param name="response">响应</param>
        </member>
        <member name="M:CatLib.Routing.Route.ControllerCall(CatLib.Routing.Request,CatLib.Routing.Response)">
            <summary>
            控制器调用
            </summary>
            <param name="request">请求</param>
            <param name="response">响应</param>
        </member>
        <member name="M:CatLib.Routing.Route.ClearCompile">
            <summary>
            清空路由编译条目
            </summary>
        </member>
        <member name="M:CatLib.Routing.Route.CompileRoute">
            <summary>
            编译路由条目
            </summary>
        </member>
        <member name="T:CatLib.Routing.RouteAction">
            <summary>
            路由行为
            </summary>
        </member>
        <member name="T:CatLib.Routing.RouteAction.RouteTypes">
            <summary>
            路由行为类型
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteAction.RouteTypes.CallBack">
            <summary>
            回调形路由
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteAction.RouteTypes.ControllerCall">
            <summary>
            控制器调用
            </summary>
        </member>
        <member name="P:CatLib.Routing.RouteAction.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:CatLib.Routing.RouteAction.Action">
            <summary>
            回调行为
            </summary>
        </member>
        <member name="P:CatLib.Routing.RouteAction.Controller">
            <summary>
            控制器
            </summary>
        </member>
        <member name="P:CatLib.Routing.RouteAction.Func">
            <summary>
            调度函数名
            </summary>
        </member>
        <member name="T:CatLib.Routing.RouteCompiler">
            <summary>
            路由条目编译器
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteCompiler.SEPARATORS">
            <summary>
            分隔符
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteCompiler.VARIABLE_MAXIMUM_LENGTH">
            <summary>
            变量最大长度
            </summary>
        </member>
        <member name="M:CatLib.Routing.RouteCompiler.Compile(CatLib.Routing.Route)">
            <summary>
            编译路由条目
            </summary>
            <returns>编译后的路由条目</returns>
        </member>
        <member name="M:CatLib.Routing.RouteCompiler.CompilePattern(CatLib.Routing.Route,System.String,System.Boolean)">
            <summary>
            编译参数
            </summary>
            <param name="route">路由条目</param>
            <param name="uri">uri</param>
            <param name="isHost">是否是host</param>
            <returns>编译数据</returns>
        </member>
        <member name="M:CatLib.Routing.RouteCompiler.ComputeRegexp(System.Collections.Generic.IList{System.String[]},System.Int32,System.Int32)">
            <summary>
            计算表达式
            </summary>
            <param name="tokens">处理块</param>
            <param name="index">第几个下标</param>
            <param name="firstOptional">第一个可选项的下标</param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.RouteCompiler.StrRepeat(System.String,System.Int32)">
            <summary>
            重复字符串
            </summary>
            <param name="val">值</param>
            <param name="num">重复的次数</param>
            <returns>字符串</returns>
        </member>
        <member name="M:CatLib.Routing.RouteCompiler.RegexQuote(System.String)">
            <summary>
            转义正则表达式字符
            </summary>
            <param name="str">需要转义的字符</param>
            <returns>转义后的字符</returns>
        </member>
        <member name="M:CatLib.Routing.RouteCompiler.FindNextSeparator(System.String)">
            <summary>
            搜索下一个分隔符
            </summary>
            <param name="uri">uri</param>
            <returns>下一个分隔符</returns>
        </member>
        <member name="M:CatLib.Routing.RouteCompiler.IsMatch(System.String,System.String)">
            <summary>
            是否匹配
            </summary>
            <param name="val">输入值</param>
            <param name="regstr">正则表达式</param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.RouteCompiler.MatchParameters(System.String,System.String,System.Int32[]@)">
            <summary>
            获取参数
            </summary>
            <param name="uri">uri</param>
            <param name="regstr">正则表达式</param>
            <param name="parameIndex">参数下标</param>
            <returns>匹配到的参数</returns>
        </member>
        <member name="T:CatLib.Routing.RouteGroup">
            <summary>
            路由组
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteGroup.options">
            <summary>
            路由配置
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteGroup.routes">
            <summary>
            在路由组中的路由条目
            </summary>
        </member>
        <member name="M:CatLib.Routing.RouteGroup.#ctor">
            <summary>
            路由组
            </summary>
        </member>
        <member name="M:CatLib.Routing.RouteGroup.AddRoute(CatLib.API.Routing.IRoute)">
            <summary>
            增加路由条目到路由组中
            </summary>
            <param name="route">路由条目</param>
            <returns>当前路由组实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteGroup.Defaults(System.String,System.String)">
            <summary>
            设定参数的默认值
            </summary>
            <param name="name">参数名</param>
            <param name="val">参数值</param>
            <returns>当前路由组实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteGroup.Where(System.String,System.String)">
            <summary>
            约束指定参数必须符合正则表达式
            </summary>
            <param name="name">参数名</param>
            <param name="pattern">约束的正则表达式</param>
            <returns>当前路由组实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteGroup.Middleware(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse}},System.Int32)">
            <summary>
            添加路由中间件
            </summary>
            <param name="middleware">中间件</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前路由组实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteGroup.OnError(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception}},System.Int32)">
            <summary>
            当路由出现错误时
            </summary>
            <param name="onError">错误处理函数</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前路由组实例</returns>
        </member>
        <member name="T:CatLib.Routing.RouteOptions">
            <summary>
            路由配置
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteOptions.middleware">
            <summary>
            路由请求过滤链
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteOptions.onError">
            <summary>
            当路由出现异常时的过滤器链
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteOptions.wheres">
            <summary>
            筛选条件
            </summary>
        </member>
        <member name="F:CatLib.Routing.RouteOptions.defaults">
            <summary>
            默认值
            </summary>
        </member>
        <member name="E:CatLib.Routing.RouteOptions.OnCompiledChange">
            <summary>
            当被编译的内容发生改变时
            </summary>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.GetDefaults(System.String,System.String)">
            <summary>
            获取参数默认值
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>默认值</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.GetWhere(System.String)">
            <summary>
            获取筛选条件
            </summary>
            <param name="varName">变量名</param>
            <returns>筛选条件,如果不存在则返回null</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.Where(System.String,System.String,System.Boolean)">
            <summary>
            约束指定参数必须符合指定模式才会被路由
            </summary>
            <param name="name">名字</param>
            <param name="pattern">约束条件</param>
            <param name="overrided">是否覆盖配置</param>
            <returns>当前路由配置实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.Defaults(System.String,System.String,System.Boolean)">
            <summary>
            设定默认值
            </summary>
            <param name="name">参数名</param>
            <param name="val">默认值</param>
            <param name="overrided">是否覆盖配置</param>
            <returns>当前路由配置实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.OnError(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception}},System.Int32)">
            <summary>
            当路由出现错误时
            </summary>
            <param name="onError">错误处理函数</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前路由配置实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.Middleware(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse}},System.Int32)">
            <summary>
            路由中间件
            </summary>
            <param name="middleware">中间件</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前路由配置实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.GatherMiddleware">
            <summary>
            获取路由的中间件
            </summary>
            <returns>中间件过滤器链</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.GatherOnError">
            <summary>
            获取当出现错误时的过滤器链
            </summary>
            <returns>错误处理过滤器链</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.Merge(CatLib.Routing.RouteOptions)">
            <summary>
            将当前路由配置中的信息合并到给定的路由配置中
            </summary>
            <param name="options">路由配置</param>
            <returns>当前路由配置实例</returns>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.MergeMiddleware(CatLib.Routing.RouteOptions)">
            <summary>
            合并中间件
            </summary>
            <param name="options">外部路由配置</param>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.MergeOnError(CatLib.Routing.RouteOptions)">
            <summary>
            合并错误时的调度
            </summary>
            <param name="options">外部路由配置</param>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.MergeWhere(CatLib.Routing.RouteOptions)">
            <summary>
            合并where
            </summary>
            <param name="options">外部路由配置</param>
        </member>
        <member name="M:CatLib.Routing.RouteOptions.MergeDefaults(CatLib.Routing.RouteOptions)">
            <summary>
            合并默认值
            </summary>
            <param name="options">外部路由配置</param>
        </member>
        <member name="T:CatLib.Routing.RouteParameterBinder">
            <summary>
            路由参数绑定
            </summary>
        </member>
        <member name="M:CatLib.Routing.RouteParameterBinder.Parameters(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            获取参数
            </summary>
            <param name="route">路由条目</param>
            <param name="request">请求</param>
        </member>
        <member name="M:CatLib.Routing.RouteParameterBinder.BindPathParameters(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            匹配路径
            </summary>
            <param name="route">路由条目</param>
            <param name="request">请求</param>
        </member>
        <member name="M:CatLib.Routing.RouteParameterBinder.BindHostParameters(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            匹配Host
            </summary>
            <param name="route">路由条目</param>
            <param name="request">请求</param>
        </member>
        <member name="M:CatLib.Routing.RouteParameterBinder.BindQueryParameters(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            匹配绑定参数
            </summary>
            <param name="route">路由条目</param>
            <param name="request">请求</param>
        </member>
        <member name="M:CatLib.Routing.RouteParameterBinder.MatchToKeys(CatLib.Routing.Route,CatLib.Routing.Request,System.Text.RegularExpressions.Match)">
            <summary>
            匹配路径中的key
            </summary>
            <param name="route"></param>
            <param name="request"></param>
            <param name="matches"></param>
        </member>
        <member name="M:CatLib.Routing.RouteParameterBinder.ReplaceDefaults(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            将没有传入的参数替换为默认参数
            </summary>
            <param name="route"></param>
            <param name="request"></param>
        </member>
        <member name="T:CatLib.Routing.Router">
            <summary>
            路由服务
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.SEPARATOR">
            <summary>
            分隔符
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.events">
            <summary>
            全局调度器
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.container">
            <summary>
            容器
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.schemes">
            <summary>
            协议方案
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.onNotFound">
            <summary>
            当路由没有找到时过滤链
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.middleware">
            <summary>
            路由请求中间件
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.onError">
            <summary>
            当出现异常时的过滤器链
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.routeGroup">
            <summary>
            路由组
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.routeGroupStack">
            <summary>
            路由组堆栈
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.requestStack">
            <summary>
            请求堆栈
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.routeStack">
            <summary>
            路由条目调用堆栈
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.responseStack">
            <summary>
            响应堆栈
            </summary>
        </member>
        <member name="F:CatLib.Routing.Router.defaultScheme">
            <summary>
            默认的scheme
            </summary>
        </member>
        <member name="M:CatLib.Routing.Router.#ctor(CatLib.API.Event.IEvent,CatLib.API.Stl.IContainer)">
            <summary>
            创建一个新的路由器
            </summary>
            <param name="events">事件</param>
            <param name="container">容器</param>
        </member>
        <member name="M:CatLib.Routing.Router.SetDefaultScheme(System.String)">
            <summary>
            设定默认的scheme
            </summary>
            <param name="scheme">默认的scheme</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.GetDefaultScheme">
            <summary>
            获取默认的scheme
            </summary>
            <returns>默认scheme</returns>
        </member>
        <member name="M:CatLib.Routing.Router.Reg(System.String,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse})">
            <summary>
            根据回调行为注册一个路由
            </summary>
            <param name="uris">统一资源标识符</param>
            <param name="action">行为</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.Reg(System.String,System.Type,System.String)">
            <summary>
            根据控制器的type和调用的方法名字注册一个路由
            </summary>
            <param name="uris">uri</param>
            <param name="controller">控制器类型</param>
            <param name="func">调用的方法名</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.OnNotFound(System.Action{CatLib.API.Routing.IRequest,System.Action{CatLib.API.Routing.IRequest}},System.Int32)">
            <summary>
            当路由没有找到时
            </summary>
            <param name="middleware">中间件</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.Middleware(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse}},System.Int32)">
            <summary>
            全局路由中间件
            </summary>
            <param name="middleware">中间件</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前路由器实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.OnError(System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception,System.Action{CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception}},System.Int32)">
            <summary>
            当路由出现错误时
            </summary>
            <param name="onError">错误处理函数</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.Dispatch(System.String,System.Object)">
            <summary>
            调度路由
            </summary>
            <param name="uri">路由地址</param>
            <param name="context">上下文</param>
            <returns>请求响应</returns>
        </member>
        <member name="M:CatLib.Routing.Router.Group(System.String)">
            <summary>
            建立或者获取一个已经建立的路由组
            </summary>
            <param name="name">路由组名字</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.Group(System.Action,System.String)">
            <summary>
            建立匿名路由组，调用的闭包内为路由组有效范围, 允许给定一个名字来显示命名路由组
            </summary>
            <param name="area">区域</param>
            <param name="name">路由组名字</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.RouterCompiler">
            <summary>
            路由器编译
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.Routing.Router.RegisterRoute(System.String,CatLib.Routing.RouteAction)">
            <summary>
            注册一个路由方案
            </summary>
            <param name="uris">统一资源标识符</param>
            <param name="action">行为</param>
            <returns>当前实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.MakeRoute(CatLib.Routing.Uri,CatLib.Routing.RouteAction)">
            <summary>
            产生一个路由条目
            </summary>
            <param name="uri">uri</param>
            <param name="action">路由行为</param>
            <returns>路由条目</returns>
        </member>
        <member name="M:CatLib.Routing.Router.ThrowOnNotFound(CatLib.API.Routing.IRequest)">
            <summary>
            触发没有找到路由的过滤器链
            </summary>
            <param name="request">请求</param>
        </member>
        <member name="M:CatLib.Routing.Router.ThrowOnError(CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse,System.Exception)">
            <summary>
            触发异常
            </summary>
            <param name="request">请求</param>
            <param name="response">响应</param>
            <param name="ex">异常</param>
        </member>
        <member name="M:CatLib.Routing.Router.RunRouteWithMiddleware(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            通过中间件后执行路由请求
            </summary>
            <param name="route">路由条目</param>
            <param name="request">请求</param>
            <returns>响应</returns>
        </member>
        <member name="M:CatLib.Routing.Router.RunInRoute(CatLib.Routing.Route,CatLib.Routing.Request,CatLib.Routing.Response)">
            <summary>
            执行路由请求
            </summary>
            <param name="route">路由</param>
            <param name="request">请求</param>
            <param name="response">响应</param>
            <returns>响应</returns>
        </member>
        <member name="M:CatLib.Routing.Router.PrepareResponse(CatLib.API.Routing.IRequest,CatLib.API.Routing.IResponse)">
            <summary>
            准备响应的内容
            </summary>
            <param name="request">请求</param>
            <param name="response">响应</param>
        </member>
        <member name="M:CatLib.Routing.Router.MakeScheme(System.String)">
            <summary>
            增加一个处理方案
            </summary>
            <param name="name">scheme名字</param>
            <returns>当前路由实例</returns>
        </member>
        <member name="M:CatLib.Routing.Router.FindRoute(CatLib.Routing.Request)">
            <summary>
            查找一个合适的路由
            </summary>
            <param name="request">请求</param>
            <returns>命中的路由</returns>
        </member>
        <member name="M:CatLib.Routing.Router.MakeRequest(System.String,System.Object)">
            <summary>
            创建请求
            </summary>
            <param name="uri">uri</param>
            <param name="context">上下文</param>
            <returns>请求</returns>
        </member>
        <member name="M:CatLib.Routing.Router.Prefix(System.String)">
            <summary>
            处理uri为符合规则的url
            </summary>
            <param name="url">url</param>
            <returns>处理后的url</returns>
        </member>
        <member name="M:CatLib.Routing.Router.GetLastGroupPrefix">
            <summary>
            获取最后的分组信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:CatLib.Routing.Router.GuardUri(System.String)">
            <summary>
            uri 保护
            </summary>
            <param name="uri">uri</param>
            <returns>处理后的uri</returns>
        </member>
        <member name="T:CatLib.Routing.RoutingProvider">
            <summary>
            路由服务
            </summary>
        </member>
        <member name="M:CatLib.Routing.RoutingProvider.OnProviderProcess">
            <summary>
            执行路由编译，路由编译总是最后进行的
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.Routing.RoutingProvider.Register">
            <summary>
            注册路由条目
            </summary>
        </member>
        <member name="M:CatLib.Routing.RoutingProvider.RegisterAttrRouteCompiler">
            <summary>
            注册属性路由编译器
            </summary>
        </member>
        <member name="T:CatLib.Routing.Scheme">
            <summary>
            方案
            </summary>
        </member>
        <member name="F:CatLib.Routing.Scheme.routes">
            <summary>
            路由条目列表
            </summary>
        </member>
        <member name="F:CatLib.Routing.Scheme.name">
            <summary>
            方案名
            </summary>
        </member>
        <member name="P:CatLib.Routing.Scheme.Name">
            <summary>
            Scheme Name
            </summary>
        </member>
        <member name="M:CatLib.Routing.Scheme.#ctor(System.String)">
            <summary>
            新建一个方案
            </summary>
            <param name="name">方案名</param>
        </member>
        <member name="M:CatLib.Routing.Scheme.AddRoute(CatLib.Routing.Route)">
            <summary>
            增加一个路由
            </summary>
            <param name="route">路由条目</param>
        </member>
        <member name="M:CatLib.Routing.Scheme.Match(CatLib.Routing.Request)">
            <summary>
            匹配一个路由
            </summary>
            <param name="request">请求</param>
            <returns>匹配到的路由条目</returns>
        </member>
        <member name="M:CatLib.Routing.Scheme.MatchAgainstRoutes(CatLib.Routing.Request)">
            <summary>
            匹配路由
            </summary>
            <param name="request">请求</param>
            <returns>匹配到的路由条目</returns>
        </member>
        <member name="T:CatLib.Routing.Uri">
            <summary>
            Uri
            </summary>
        </member>
        <member name="F:CatLib.Routing.Uri.uri">
            <summary>
            原始uri
            </summary>
        </member>
        <member name="P:CatLib.Routing.Uri.Original">
            <summary>
            原始Uri信息
            </summary>
        </member>
        <member name="M:CatLib.Routing.Uri.#ctor(System.String)">
            <summary>
            Uri
            </summary>
            <param name="uri">uri</param>
        </member>
        <member name="M:CatLib.Routing.Uri.#ctor(System.Uri)">
            <summary>
            Uri
            </summary>
            <param name="uri">uri</param>
        </member>
        <member name="P:CatLib.Routing.Uri.FullPath">
            <summary>
            全路径(全路径不包含userinfo) eg: catlib://login/register?id=10
            </summary>
        </member>
        <member name="P:CatLib.Routing.Uri.NoParamFullPath">
            <summary>
            无参的全路径 eg:catlib://login/register
            </summary>
        </member>
        <member name="P:CatLib.Routing.Uri.Scheme">
            <summary>
            方案 eg: catlib
            </summary>
        </member>
        <member name="P:CatLib.Routing.Uri.Host">
            <summary>
            host eg: login
            </summary>
        </member>
        <member name="P:CatLib.Routing.Uri.UserInfo">
            <summary>
            请求中附带的用户信息
            </summary>
        </member>
        <member name="P:CatLib.Routing.Uri.Segments">
            <summary>
            片段
            </summary>
        </member>
        <member name="T:CatLib.Routing.HostValidator">
            <summary>
            Host验证器
            </summary>
        </member>
        <member name="M:CatLib.Routing.HostValidator.Matches(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            是否匹配
            </summary>
            <param name="route">路由条目</param>
            <param name="request">请求</param>
            <returns>是否匹配</returns>
        </member>
        <member name="T:CatLib.Routing.IValidators">
            <summary>
            验证器
            </summary>
        </member>
        <member name="M:CatLib.Routing.IValidators.Matches(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            是否匹配
            </summary>
            <param name="route">路由条目</param>
            <param name="request">请求</param>
            <returns>是否匹配</returns>
        </member>
        <member name="T:CatLib.Routing.UriValidator">
            <summary>
            统一资源定位符验证器
            </summary>
        </member>
        <member name="M:CatLib.Routing.UriValidator.Matches(CatLib.Routing.Route,CatLib.Routing.Request)">
            <summary>
            是否匹配
            </summary>
            <param name="route">路由条目</param>
            <param name="request">请求</param>
            <returns>是否匹配</returns>
        </member>
        <member name="T:CatLib.Stl.BindData">
            <summary>
            服务绑定数据
            </summary>    
        </member>
        <member name="P:CatLib.Stl.BindData.Service">
            <summary>
            当前绑定服务的服务名
            </summary>
        </member>
        <member name="P:CatLib.Stl.BindData.Concrete">
            <summary>
            服务实现，执行这个委托将会获得服务实例
            </summary>
        </member>
        <member name="P:CatLib.Stl.BindData.IsStatic">
            <summary>
            当前绑定的服务是否是静态服务
            </summary>
        </member>
        <member name="F:CatLib.Stl.BindData.contextual">
            <summary>
            服务关系上下文
            当前服务需求某个服务时可以指定给与什么服务
            </summary>
        </member>
        <member name="F:CatLib.Stl.BindData.container">
            <summary>
            父级容器
            </summary>
        </member>
        <member name="F:CatLib.Stl.BindData.resolving">
            <summary>
            服务构造修饰器
            </summary>
        </member>
        <member name="F:CatLib.Stl.BindData.release">
            <summary>
            服务构造修饰器
            </summary>
        </member>
        <member name="F:CatLib.Stl.BindData.isDestroy">
            <summary>
            是否被释放
            </summary>
        </member>
        <member name="F:CatLib.Stl.BindData.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="F:CatLib.Stl.BindData.given">
            <summary>
            给与数据
            </summary>
        </member>
        <member name="M:CatLib.Stl.BindData.#ctor(CatLib.Stl.Container,System.String,System.Func{CatLib.API.Stl.IContainer,System.Object[],System.Object},System.Boolean)">
            <summary>
            构建一个绑定数据
            </summary>
            <param name="container">服务父级容器</param>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否是静态的</param>
        </member>
        <member name="M:CatLib.Stl.BindData.Needs(System.String)">
            <summary>
            当需求某个服务                                                                                                                                                                                                                                                                                                                                                                                  
            </summary>
            <param name="service">服务名</param>
            <returns>绑定关系临时数据</returns>
        </member>
        <member name="M:CatLib.Stl.BindData.Needs``1">
            <summary>
            当需求某个服务
            </summary>
            <typeparam name="T">服务类型</typeparam>
            <returns>绑定关系临时数据</returns>
        </member>
        <member name="M:CatLib.Stl.BindData.Alias``1">
            <summary>
            为服务设定一个别名
            </summary>
            <typeparam name="T">别名</typeparam>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.Stl.BindData.Alias(System.String)">
            <summary>
            为服务设定一个别名
            </summary>
            <param name="alias">别名</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.Stl.BindData.OnResolving(System.Func{CatLib.API.Stl.IBindData,System.Object,System.Object})">
            <summary>
            解决服务时触发的回调
            </summary>
            <param name="func">解决事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.Stl.BindData.OnRelease(System.Action{CatLib.API.Stl.IBindData,System.Object})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="action">处理事件</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.Stl.BindData.UnBind">
            <summary>
            移除绑定服务 , 在解除绑定时如果是静态化物体将会触发释放
            </summary>
        </member>
        <member name="M:CatLib.Stl.BindData.GetContextual(System.String)">
            <summary>
            获取上下文的需求关系
            </summary>
            <param name="needs">需求的服务</param>
            <returns>给与的服务</returns>
        </member>
        <member name="M:CatLib.Stl.BindData.ExecResolvingDecorator(System.Object)">
            <summary>
            执行服务修饰器
            </summary>
            <param name="obj">服务实例</param>
            <returns>修饰后的服务实例</returns>
        </member>
        <member name="M:CatLib.Stl.BindData.ExecReleaseDecorator(System.Object)">
            <summary>
            执行服务释放处理器
            </summary>
            <param name="obj">服务实例</param>
        </member>
        <member name="M:CatLib.Stl.BindData.AddContextual(System.String,System.String)">
            <summary>
            为服务增加上下文
            </summary>
            <param name="needs">需求什么服务</param>
            <param name="given">给与什么服务</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.Stl.BindData.GuardIsDestroy">
            <summary>
            守卫是否被释放
            </summary>
        </member>
        <member name="T:CatLib.Stl.Container">
            <summary>
             依赖注入容器
             </summary>
        </member>
        <member name="F:CatLib.Stl.Container.binds">
            <summary>
            服务所绑定的相关数据，记录了服务的关系
            </summary>
        </member>
        <member name="F:CatLib.Stl.Container.instances">
            <summary>
             如果所属服务是静态的那么构建后将会储存在这里
            </summary>
        </member>
        <member name="F:CatLib.Stl.Container.aliases">
            <summary>
             服务的别名(key: 别名 , value: 映射的服务名)
            </summary>
        </member>
        <member name="F:CatLib.Stl.Container.aliasesReverse">
            <summary>
            可以通过服务的真实名字来查找别名
            </summary>
        </member>
        <member name="F:CatLib.Stl.Container.tags">
            <summary>
            服务标记，一个标记允许标记多个服务
            </summary>
        </member>
        <member name="F:CatLib.Stl.Container.resolving">
            <summary>
            服务构建时的修饰器
            </summary>
        </member>
        <member name="F:CatLib.Stl.Container.release">
            <summary>
            静态服务释放时的修饰器
            </summary>
        </member>
        <member name="F:CatLib.Stl.Container.findType">
            <summary>
            类型查询回调
            当类型无法被解决时会尝试去开发者提供的查询器中查询类型
            </summary>
        </member>
        <member name="F:CatLib.Stl.Container.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="F:CatLib.Stl.Container.injectTarget">
            <summary>
            注入目标
            </summary>
        </member>
        <member name="F:CatLib.Stl.Container.buildStack">
            <summary>
            编译堆栈
            </summary>
        </member>
        <member name="M:CatLib.Stl.Container.#ctor">
            <summary>
            构造一个容器
            </summary>
        </member>
        <member name="M:CatLib.Stl.Container.Tag(System.String,System.String[])">
            <summary>
            为一个及以上的服务定义一个标记
            如果标记已经存在那么服务会被追加进列表
            </summary>
            <param name="tag">标记名</param>
            <param name="service">服务名或者别名</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="service"/>为<c>null</c>或者<paramref name="service"/>中的元素为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:CatLib.Stl.Container.Tagged(System.String)">
            <summary>
            根据标记名生成标记所对应的所有服务实例
            </summary>
            <param name="tag">标记名</param>
            <returns>将会返回标记所对应的所有服务实例</returns>
            <exception cref="T:CatLib.API.RuntimeException"><paramref name="tag"/>不存在</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/>为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:CatLib.Stl.Container.GetBind(System.String)">
            <summary>
            获取服务的绑定数据,如果绑定不存在则返回null（只有进行过bind才视作绑定）
            </summary>
            <param name="service">服务名或别名</param>
            <returns>服务绑定数据或者null</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="service"/>为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:CatLib.Stl.Container.HasBind(System.String)">
            <summary>
            是否已经绑定了服务（只有进行过bind才视作绑定）
            </summary>
            <param name="service">服务名或别名</param>
            <returns>服务是否被绑定</returns>
        </member>
        <member name="M:CatLib.Stl.Container.IsStatic(System.String)">
            <summary>
            服务是否是静态化的,如果服务不存在也将返回false
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>是否是静态化的</returns>
        </member>
        <member name="M:CatLib.Stl.Container.Alias(System.String,System.String)">
            <summary>
            为服务设定一个别名
            </summary>
            <param name="alias">别名</param>
            <param name="service">映射到的服务名</param>
            <returns>当前容器对象</returns>
            <exception cref="T:CatLib.API.RuntimeException"><paramref name="alias"/>别名冲突或者<paramref name="service"/>的绑定与实例都不存在</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="alias"/>,<paramref name="service"/>为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:CatLib.Stl.Container.BindIf(System.String,System.Func{CatLib.API.Stl.IContainer,System.Object[],System.Object},System.Boolean)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否是静态的</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.Stl.Container.BindIf(System.String,System.Type,System.Boolean)">
            <summary>
            如果服务不存在那么则绑定服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否是静态的</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.Stl.Container.Bind(System.String,System.Type,System.Boolean)">
            <summary>
            绑定一个服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否静态化</param>
            <returns>服务绑定数据</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="concrete"/>为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:CatLib.Stl.Container.Bind(System.String,System.Func{CatLib.API.Stl.IContainer,System.Object[],System.Object},System.Boolean)">
            <summary>
            绑定一个服务
            </summary>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <param name="isStatic">服务是否静态化</param>
            <returns>服务绑定数据</returns>
            <exception cref="T:CatLib.API.RuntimeException"><paramref name="service"/>绑定冲突</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="concrete"/>为<c>null</c></exception>
        </member>
        <member name="M:CatLib.Stl.Container.Call(System.Object,System.String,System.Object[])">
            <summary>
            以依赖注入形式调用一个方法
            </summary>
            <param name="instance">方法对象</param>
            <param name="method">方法名</param>
            <param name="param">附加的参数</param>
            <returns>方法返回值</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/>,<paramref name="method"/>为<c>null</c>或者空字符串</exception>
        </member>
        <member name="M:CatLib.Stl.Container.Call(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            以依赖注入形式调用一个方法
            </summary>
            <param name="instance">方法对象</param>
            <param name="methodInfo">方法信息</param>
            <param name="param">方法参数</param>
            <returns>方法返回值</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/>,<paramref name="methodInfo"/>为<c>null</c></exception>
        </member>
        <member name="M:CatLib.Stl.Container.Make(System.String,System.Object[])">
            <summary>
            构造服务
            </summary>
            <param name="service">服务名或别名</param>
            <param name="param">构造参数</param>
            <returns>服务实例，如果构造失败那么返回null</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="service"/>为<c>null</c>或者空字符串</exception>
            <exception cref="T:CatLib.API.RuntimeException">出现循环依赖</exception>
        </member>
        <member name="P:CatLib.Stl.Container.Item(System.String)">
            <summary>
            构造服务
            </summary>
            <param name="service">服务名或者别名</param>
            <returns>服务实例，如果构造失败那么返回null</returns>
        </member>
        <member name="M:CatLib.Stl.Container.Instance(System.String,System.Object)">
            <summary>
            静态化一个服务,实例值会经过解决修饰器
            </summary>
            <param name="service">服务名或别名</param>
            <param name="instance">服务实例，<c>null</c>也是合法的实例值</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="service"/>为<c>null</c>或者空字符串</exception>
            <exception cref="T:CatLib.API.RuntimeException"><paramref name="service"/>的服务在绑定设置中不是静态的</exception>
        </member>
        <member name="M:CatLib.Stl.Container.Release(System.String)">
            <summary>
            释放静态化实例
            </summary>
            <param name="service">服务名或别名</param>
        </member>
        <member name="M:CatLib.Stl.Container.OnFindType(System.Func{System.String,System.Type},System.Int32)">
            <summary>
            当查找类型无法找到时会尝试去调用开发者提供的查找类型函数
            </summary>
            <param name="finder">查找类型的回调</param>
            <param name="priority">查询优先级(值越小越优先)</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:CatLib.Stl.Container.OnRelease(System.Action{CatLib.API.Stl.IBindData,System.Object})">
            <summary>
            当静态服务被释放时
            </summary>
            <param name="action">处理释放时的回调</param>
            <returns>当前容器实例</returns>
        </member>
        <member name="M:CatLib.Stl.Container.OnResolving(System.Func{CatLib.API.Stl.IBindData,System.Object,System.Object})">
            <summary>
            当服务被解决时，生成的服务会经过注册的回调函数
            </summary>
            <param name="func">回调函数</param>
            <returns>当前容器对象</returns>
        </member>
        <member name="M:CatLib.Stl.Container.UnBind(System.String)">
            <summary>
            解除绑定服务
            </summary>
            <param name="service">服务名或者别名</param>
        </member>
        <member name="M:CatLib.Stl.Container.ExecOnResolvingDecorator(CatLib.API.Stl.IBindData,System.Object)">
            <summary>
            执行全局解决修饰器
            </summary>
            <param name="bindData">服务绑定数据</param>
            <param name="obj">服务实例</param>
            <returns>被修饰器修饰后的服务实例</returns>
        </member>
        <member name="M:CatLib.Stl.Container.ExecOnReleaseDecorator(CatLib.API.Stl.IBindData,System.Object)">
            <summary>
            执行全局释放修饰器
            </summary>
            <param name="bindData">服务绑定数据</param>
            <param name="obj">服务实例</param>
            <returns>被修饰器修饰后的服务实例</returns>
        </member>
        <member name="M:CatLib.Stl.Container.BuildMake(System.String,System.Type,System.Boolean,System.Object[])">
            <summary>
            构造服务
            </summary>
            <param name="makeService">服务名</param>
            <param name="makeServiceType">服务类型</param>
            <param name="isFromMake">是否直接调用自Make函数</param>
            <param name="param">构造参数</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:CatLib.Stl.Container.BuildUseConcrete(CatLib.Stl.BindData,System.Type,System.Object[])">
            <summary>
            常规编译一个服务
            </summary>
            <param name="makeServiceBindData">服务绑定数据</param>
            <param name="makeServiceType">服务类型</param>
            <param name="param">构造参数</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:CatLib.Stl.Container.Build(CatLib.Stl.BindData,System.Type,System.Object[])">
            <summary>
            构造服务 - 实现
            </summary>
            <param name="makeServiceBindData">服务绑定数据</param>
            <param name="makeServiceType">服务类型</param>
            <param name="param">构造参数</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:CatLib.Stl.Container.Normalize(System.String)">
            <summary>
            标准化服务名
            </summary>
            <param name="service">服务名</param>
            <returns>标准化后的服务名</returns>
        </member>
        <member name="M:CatLib.Stl.Container.AttrInject(CatLib.Stl.BindData,System.Object)">
            <summary>
            属性注入
            </summary>
            <param name="makeServiceBindData">服务绑定数据</param>
            <param name="makeServiceInstance">服务实例</param>
            <returns>服务实例</returns>
            <exception cref="T:CatLib.API.RuntimeException">属性是必须的或者注入类型和需求类型不一致</exception>
        </member>
        <member name="M:CatLib.Stl.Container.ResolveNonClassAttr(CatLib.Stl.BindData,System.String)">
            <summary>
            解决非类类型
            </summary>
            <param name="makeServiceBindData">请求注入操作的服务绑定数据</param>
            <param name="service">希望构造的服务名或者别名</param>
            <returns>解决结果</returns>
        </member>
        <member name="M:CatLib.Stl.Container.ResloveClassAttr(CatLib.Stl.BindData,System.String)">
            <summary>
            解决类类型
            </summary>
            <param name="makeServiceBindData">请求注入操作的服务绑定数据</param>
            <param name="service">希望构造的服务名或者别名</param>
            <returns>解决结果</returns>
        </member>
        <member name="M:CatLib.Stl.Container.GetDependencies(CatLib.Stl.BindData,System.Collections.Generic.IList{System.Reflection.ParameterInfo},System.Collections.Generic.IList{System.Object})">
            <summary>
            获取依赖解决结果
            </summary>
            <param name="makeServiceBindData">服务绑定数据</param>
            <param name="paramInfo">服务实例的参数信息</param>
            <param name="param">输入的构造参数列表</param>
            <returns>服务所需参数的解决结果</returns>
            <exception cref="T:CatLib.API.RuntimeException">生成的实例类型和需求类型不一致</exception>
        </member>
        <member name="M:CatLib.Stl.Container.ResolveNonClass(CatLib.Stl.BindData,System.String)">
            <summary>
            解决非类类型
            </summary>
            <param name="makeServiceBindData">请求注入操作的服务绑定数据</param>
            <param name="service">希望解决的服务名或者别名</param>
            <returns>解决结果</returns>
        </member>
        <member name="M:CatLib.Stl.Container.ResloveClass(CatLib.Stl.BindData,System.String)">
            <summary>
            解决类类型
            </summary>
            <param name="makeServiceBindData">请求注入操作的服务绑定数据</param>
            <param name="service">希望解决的服务名或者别名</param>
            <returns>解决结果</returns>
        </member>
        <member name="M:CatLib.Stl.Container.AliasToService(System.String)">
            <summary>
            获取别名最终对应的服务名
            </summary>
            <param name="service">服务名或别名</param>
            <returns>最终映射的服务名</returns>
        </member>
        <member name="M:CatLib.Stl.Container.GetBindData(System.String)">
            <summary>
            获取服务绑定数据(与GetBind的区别是永远不会为null)
            </summary>
            <param name="service">服务名</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.Stl.Container.MakeEmptyBindData(System.String)">
            <summary>
            制作一个空的绑定数据
            </summary>
            <param name="service">服务名</param>
            <returns>空绑定数据</returns>
        </member>
        <member name="M:CatLib.Stl.Container.GetType(System.String)">
            <summary>
            获取类型映射
            </summary>
            <param name="service">服务名</param>
            <returns>服务类型</returns>
        </member>
        <member name="T:CatLib.Stl.GivenData">
            <summary>
            绑定关系临时数据,用于支持链式调用
            </summary>
        </member>
        <member name="F:CatLib.Stl.GivenData.bindData">
            <summary>
            绑定数据
            </summary>
        </member>
        <member name="F:CatLib.Stl.GivenData.needs">
            <summary>
            需求什么服务
            </summary>
        </member>
        <member name="M:CatLib.Stl.GivenData.#ctor(CatLib.Stl.BindData)">
            <summary>
            绑定关系临时数据
            </summary>
            <param name="bindData">服务绑定数据</param>
        </member>
        <member name="M:CatLib.Stl.GivenData.Needs(System.String)">
            <summary>
            需求什么服务
            </summary>
            <param name="needs">需求什么服务</param>
            <returns>绑定关系实例</returns>
        </member>
        <member name="M:CatLib.Stl.GivenData.Given(System.String)">
            <summary>
            给与什么服务
            </summary>
            <param name="service">给与的服务名或别名</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.Stl.GivenData.Given``1">
            <summary>
            给与什么服务
            </summary>
            <typeparam name="T">给与的服务名或别名</typeparam>
            <returns>服务绑定数据</returns>
        </member>
        <member name="T:CatLib.Stl.FilterChain`1">
            <summary>
            过滤器链
            </summary>
            <typeparam name="TIn">输入参数</typeparam>
        </member>
        <member name="F:CatLib.Stl.FilterChain`1.filterList">
            <summary>
            过滤器链
            </summary>
        </member>
        <member name="P:CatLib.Stl.FilterChain`1.FilterList">
            <summary>
            过滤器列表
            </summary>
        </member>
        <member name="F:CatLib.Stl.FilterChain`1.stack">
            <summary>
            堆栈 用于解决内部递归调用过滤器链所出现的问题
            </summary>
        </member>
        <member name="M:CatLib.Stl.FilterChain`1.#ctor">
            <summary>
            构建一个过滤器链
            </summary>
        </member>
        <member name="M:CatLib.Stl.FilterChain`1.Add(System.Action{`0,System.Action{`0}},System.Int32)">
            <summary>
            增加一个过滤器
            </summary>
            <param name="filter">过滤器</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>过滤器链</returns>
        </member>
        <member name="M:CatLib.Stl.FilterChain`1.Do(`0)">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入数据</param>
        </member>
        <member name="M:CatLib.Stl.FilterChain`1.Do(`0,System.Action{`0})">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入数据</param>
            <param name="then">当过滤器执行完成后执行的操作</param>
        </member>
        <member name="M:CatLib.Stl.FilterChain`1.Next(System.Action{`0})">
            <summary>
            下一层过滤器链
            </summary>
            <param name="then">当过滤器执行完成后执行的操作</param>
            <returns>执行过滤器</returns>
        </member>
        <member name="T:CatLib.Stl.FilterChain`2">
            <summary>
            过滤器链
            </summary>
            <typeparam name="TIn">输入参数</typeparam>
            <typeparam name="TOut">输出参数</typeparam>
        </member>
        <member name="F:CatLib.Stl.FilterChain`2.filterList">
            <summary>
            过滤器链
            </summary>
        </member>
        <member name="P:CatLib.Stl.FilterChain`2.FilterList">
            <summary>
            过滤器列表
            </summary>
        </member>
        <member name="F:CatLib.Stl.FilterChain`2.stack">
            <summary>
            堆栈 用于解决内部递归调用过滤器链所出现的问题
            </summary>
        </member>
        <member name="M:CatLib.Stl.FilterChain`2.#ctor">
            <summary>
            构建一个过滤器链
            </summary>
        </member>
        <member name="M:CatLib.Stl.FilterChain`2.Add(System.Action{`0,`1,System.Action{`0,`1}},System.Int32)">
            <summary>
            增加一个过滤器
            </summary>
            <param name="filter">过滤器</param>
            <param name="priority">优先级</param>
            <returns>过滤器链</returns>
        </member>
        <member name="M:CatLib.Stl.FilterChain`2.Do(`0,`1)">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入参数</param>
            <param name="outData">输出参数</param>
        </member>
        <member name="M:CatLib.Stl.FilterChain`2.Do(`0,`1,System.Action{`0,`1})">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入参数</param>
            <param name="outData">输出参数</param>
            <param name="then">当过滤器执行完成后执行的操作</param>
        </member>
        <member name="M:CatLib.Stl.FilterChain`2.Next(System.Action{`0,`1})">
            <summary>
            下一层过滤器链
            </summary>
            <param name="then">当过滤器执行完成后执行的操作</param>
            <returns>执行过滤器</returns>
        </member>
        <member name="T:CatLib.Stl.FilterChain`3">
            <summary>
            过滤器链
            </summary>
            <typeparam name="TIn">输入参数</typeparam>
            <typeparam name="TOut">输出参数</typeparam>
            <typeparam name="TException">输入异常</typeparam>
        </member>
        <member name="F:CatLib.Stl.FilterChain`3.filterList">
            <summary>
            过滤器链
            </summary>
        </member>
        <member name="P:CatLib.Stl.FilterChain`3.FilterList">
            <summary>
            过滤器列表
            </summary>
        </member>
        <member name="F:CatLib.Stl.FilterChain`3.stack">
            <summary>
            堆栈 用于解决内部递归调用过滤器链所出现的问题
            </summary>
        </member>
        <member name="M:CatLib.Stl.FilterChain`3.#ctor">
            <summary>
            构建一个过滤器链
            </summary>
        </member>
        <member name="M:CatLib.Stl.FilterChain`3.Add(System.Action{`0,`1,`2,System.Action{`0,`1,`2}},System.Int32)">
            <summary>
            增加一个过滤器
            </summary>
            <param name="filter">过滤器</param>
            <param name="priority">优先级</param>
            <returns>过滤器链</returns>
        </member>
        <member name="M:CatLib.Stl.FilterChain`3.Do(`0,`1,`2)">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入参数</param>
            <param name="outData">输出参数</param>
            <param name="exception">输入异常</param>
        </member>
        <member name="M:CatLib.Stl.FilterChain`3.Do(`0,`1,`2,System.Action{`0,`1,`2})">
            <summary>
            执行过滤器链
            </summary>
            <param name="inData">输入参数</param>
            <param name="outData">输出参数</param>
            <param name="exception">输入异常</param>
            <param name="then">当过滤器执行完成后执行的操作</param>
        </member>
        <member name="M:CatLib.Stl.FilterChain`3.Next(System.Action{`0,`1,`2})">
            <summary>
            下一层过滤器链
            </summary>
            <param name="then">当过滤器执行完成后执行的操作</param>
            <returns>执行过滤器</returns>
        </member>
        <member name="T:CatLib.Stl.Guard">
            <summary>
            守卫
            </summary>
        </member>
        <member name="M:CatLib.Stl.Guard.Requires``1(System.Boolean)">
            <summary>
            验证一个条件,并在该协定的条件失败时引发异常。
            </summary>
            <typeparam name="TException">异常</typeparam>
            <param name="condition">条件</param>
        </member>
        <member name="M:CatLib.Stl.Guard.NotEmptyOrNull(System.String,System.String)">
            <summary>
            不为空或者null
            </summary>
            <param name="argumentValue">参数值</param>
            <param name="argumentName">参数名</param>
        </member>
        <member name="M:CatLib.Stl.Guard.CountGreaterZero``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            长度大于0
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="argumentValue">参数值</param>
            <param name="argumentName">参数名</param>
        </member>
        <member name="M:CatLib.Stl.Guard.ElementNotEmptyOrNull(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            元素部位空或者null
            </summary>
            <param name="argumentValue">参数值</param>
            <param name="argumentName">参数名</param>
        </member>
        <member name="M:CatLib.Stl.Guard.NotNull(System.Object,System.String)">
            <summary>
            内容不为空
            </summary>
            <param name="argumentValue">参数值</param>
            <param name="argumentName">参数名</param>
        </member>
        <member name="T:CatLib.Stl.CacheNode`2">
            <summary>
            缓存节点
            </summary>
        </member>
        <member name="P:CatLib.Stl.CacheNode`2.KeyValue">
            <summary>
            键值
            </summary>
        </member>
        <member name="P:CatLib.Stl.CacheNode`2.Backward">
            <summary>
            上一个节点
            </summary>
        </member>
        <member name="P:CatLib.Stl.CacheNode`2.Forward">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="M:CatLib.Stl.CacheNode`2.#ctor(`0,`1)">
            <summary>
            创建一个缓存节点
            </summary>
            <param name="key">键</param>
            <param name="val">值</param>
        </member>
        <member name="M:CatLib.Stl.CacheNode`2.Replace(`1)">
            <summary>
            替换元素
            </summary>
            <param name="val">值</param>
        </member>
        <member name="T:CatLib.Stl.LruCache`2">
            <summary>
            近期最少使用缓存
            </summary>
        </member>
        <member name="F:CatLib.Stl.LruCache`2.maxCapacity">
            <summary>
            最大容量
            </summary>
        </member>
        <member name="F:CatLib.Stl.LruCache`2.lruCache">
            <summary>
            Lru Cache
            </summary>
        </member>
        <member name="F:CatLib.Stl.LruCache`2.header">
            <summary>
            头节点
            </summary>
        </member>
        <member name="F:CatLib.Stl.LruCache`2.tail">
            <summary>
            尾节点
            </summary>
        </member>
        <member name="F:CatLib.Stl.LruCache`2.forward">
            <summary>
            是否是向前的迭代方向
            </summary>
        </member>
        <member name="T:CatLib.Stl.LruCache`2.Enumerator">
            <summary>
            近期最少使用缓存迭代器
            </summary>
        </member>
        <member name="F:CatLib.Stl.LruCache`2.Enumerator.lruCache">
            <summary>
            近期最少使用缓存
            </summary>
        </member>
        <member name="F:CatLib.Stl.LruCache`2.Enumerator.forward">
            <summary>
            是否是向前遍历
            </summary>
        </member>
        <member name="M:CatLib.Stl.LruCache`2.Enumerator.#ctor(CatLib.Stl.LruCache{`0,`1},System.Boolean)">
            <summary>
            构造一个迭代器
            </summary>
            <param name="lruCache">近期最少使用缓存</param>
            <param name="forward">是否是前进迭代</param>
        </member>
        <member name="M:CatLib.Stl.LruCache`2.Enumerator.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>元素迭代器</returns>
        </member>
        <member name="M:CatLib.Stl.LruCache`2.Enumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.Stl.LruCache`2.#ctor(System.Int32)">
            <summary>
            创建一个Lru缓存
            </summary>
        </member>
        <member name="M:CatLib.Stl.LruCache`2.ReverseForeach">
            <summary>
            反转遍历顺序(并不是反转整个有序集)
            </summary>
        </member>
        <member name="M:CatLib.Stl.LruCache`2.Add(`0,`1)">
            <summary>
            在lru缓存中增加一个元素,如果元素已经存在则会替换元素
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:CatLib.Stl.LruCache`2.Remove(`0)">
            <summary>
            移除元素
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:CatLib.Stl.LruCache`2.Get(`0,`1)">
            <summary>
            根据key获取val，如果被淘汰则返回传入的默认值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">默认返回值</param>
            <returns>值</returns>
        </member>
        <member name="P:CatLib.Stl.LruCache`2.Count">
            <summary>
            获取Lru缓存中的元素数量
            </summary>
        </member>
        <member name="P:CatLib.Stl.LruCache`2.Item(`0)">
            <summary>
            根据key获取val，如果被淘汰则返回默认值
            </summary>
            <param name="key">键</param>
            <returns>值</returns>
        </member>
        <member name="M:CatLib.Stl.LruCache`2.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.Stl.LruCache`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.Stl.LruCache`2.RemoveLeastUsed">
            <summary>
            移除最后一个元素
            </summary>
        </member>
        <member name="M:CatLib.Stl.LruCache`2.MakeUsed(CatLib.Stl.CacheNode{`0,`1})">
            <summary>
            激活指定节点为最近使用
            </summary>
            <param name="node">节点</param>
        </member>
        <member name="T:CatLib.Stl.InternalList`1">
            <summary>
            内部列表
            </summary>
        </member>
        <member name="F:CatLib.Stl.InternalList`1.items">
            <summary>
            列表元素
            </summary>
        </member>
        <member name="P:CatLib.Stl.InternalList`1.Count">
            <summary>
            实际元素个数
            </summary>
        </member>
        <member name="P:CatLib.Stl.InternalList`1.IsDelete">
            <summary>
            是否被删除
            </summary>
        </member>
        <member name="M:CatLib.Stl.InternalList`1.#ctor(System.Int32)">
            <summary>
            新建一个内部列表
            </summary>
            <param name="capacity">容量</param>
        </member>
        <member name="P:CatLib.Stl.InternalList`1.Item(System.Int32)">
            <summary>
            获取或者设定一个元素
            </summary>
            <param name="offset">偏移量</param>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.Stl.InternalList`1.InsertAt(`0,System.Int32)">
            <summary>
            在指定位置插入元素
            </summary>
            <param name="element">元素</param>
            <param name="offset">偏移量</param>
        </member>
        <member name="M:CatLib.Stl.InternalList`1.RemoveAt(System.Int32)">
            <summary>
            移除元素
            </summary>
            <param name="offset">偏移量</param>
        </member>
        <member name="M:CatLib.Stl.InternalList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            移除范围内的元素
            </summary>
            <param name="start">起始范围(包含)</param>
            <param name="end">结束范围(包含)</param>
        </member>
        <member name="M:CatLib.Stl.InternalList`1.ReplaceAt(`0,System.Int32)">
            <summary>
            替换指定位置的元素
            </summary>
            <param name="element">元素</param>
            <param name="offset">偏移量</param>
        </member>
        <member name="M:CatLib.Stl.InternalList`1.Init(`0[])">
            <summary>
            合入元素
            </summary>
            <param name="elements">元素</param>
        </member>
        <member name="M:CatLib.Stl.InternalList`1.Merge(CatLib.Stl.InternalList{`0},System.Boolean)">
            <summary>
            合并内部列表
            </summary>
            <param name="join">需要被合并进来的内部列表</param>
            <param name="after">是否在当前列表元素的尾部合入</param>
        </member>
        <member name="M:CatLib.Stl.InternalList`1.Split(System.Int32,System.Boolean)">
            <summary>
            拆分列表
            </summary>
            <param name="offset">偏移量</param>
            <param name="after">是否是后拆</param>
        </member>
        <member name="M:CatLib.Stl.InternalList`1.Push(`0)">
            <summary>
            在尾部推入元素
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:CatLib.Stl.InternalList`1.Pop">
            <summary>
            弹出尾部数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CatLib.Stl.InternalList`1.UnShift(`0)">
            <summary>
            在列表头部加入元素
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:CatLib.Stl.InternalList`1.Shift">
            <summary>
            推出列表头部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="T:CatLib.Stl.QuickList`1">
            <summary>
            快速列表
            </summary>
            <typeparam name="TElement">元素</typeparam>
        </member>
        <member name="F:CatLib.Stl.QuickList`1.MERGE_PRO">
            <summary>
            合并系数
            </summary>
        </member>
        <member name="T:CatLib.Stl.QuickList`1.QuickListNode">
            <summary>
            快速列表结点
            </summary>
        </member>
        <member name="F:CatLib.Stl.QuickList`1.QuickListNode.Backward">
            <summary>
            后置结点
            </summary>
        </member>
        <member name="F:CatLib.Stl.QuickList`1.QuickListNode.Forward">
            <summary>
            前置结点
            </summary>
        </member>
        <member name="F:CatLib.Stl.QuickList`1.QuickListNode.List">
            <summary>
            列表
            </summary>
        </member>
        <member name="T:CatLib.Stl.QuickList`1.Enumerator">
            <summary>
            快速列表迭代器
            </summary>
        </member>
        <member name="F:CatLib.Stl.QuickList`1.Enumerator.quickList">
            <summary>
            快速列表
            </summary>
        </member>
        <member name="F:CatLib.Stl.QuickList`1.Enumerator.forward">
            <summary>
            是否是向前遍历
            </summary>
        </member>
        <member name="F:CatLib.Stl.QuickList`1.Enumerator.version">
            <summary>
            版本
            </summary>
        </member>
        <member name="F:CatLib.Stl.QuickList`1.Enumerator.current">
            <summary>
            当前元素
            </summary>
        </member>
        <member name="F:CatLib.Stl.QuickList`1.Enumerator.node">
            <summary>
            当前节点
            </summary>
        </member>
        <member name="F:CatLib.Stl.QuickList`1.Enumerator.index">
            <summary>
            访问下标
            </summary>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.Enumerator.#ctor(CatLib.Stl.QuickList{`0},System.Boolean)">
            <summary>
            构造一个迭代器
            </summary>
            <param name="quickList"></param>
            <param name="forward"></param>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.Enumerator.MoveNext">
            <summary>
            移动到下一个节点
            </summary>
            <returns>下一个节点是否存在</returns>
        </member>
        <member name="P:CatLib.Stl.QuickList`1.Enumerator.Current">
            <summary>
            获取当前元素
            </summary>
        </member>
        <member name="P:CatLib.Stl.QuickList`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前元素
            </summary>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            重置迭代器
            </summary>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.Enumerator.Dispose">
            <summary>
            释放时
            </summary>
        </member>
        <member name="F:CatLib.Stl.QuickList`1.fill">
            <summary>
            每个快速列表结点最多的元素数量
            </summary>
        </member>
        <member name="F:CatLib.Stl.QuickList`1.header">
            <summary>
            列表头
            </summary>
        </member>
        <member name="F:CatLib.Stl.QuickList`1.tail">
            <summary>
            列表尾
            </summary>
        </member>
        <member name="F:CatLib.Stl.QuickList`1.forward">
            <summary>
            是否是向前的迭代方向
            </summary>
        </member>
        <member name="F:CatLib.Stl.QuickList`1.version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="F:CatLib.Stl.QuickList`1.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="P:CatLib.Stl.QuickList`1.SyncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="P:CatLib.Stl.QuickList`1.Count">
            <summary>
            列表元素基数
            </summary>
        </member>
        <member name="P:CatLib.Stl.QuickList`1.Length">
            <summary>
            快速列表中的结点数量
            </summary>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.#ctor(System.Int32)">
            <summary>
            快速列表
            </summary>
            <param name="fill">每个结点中元素的最大数量</param>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.First">
            <summary>
            获取第一个元素
            </summary>
            <returns>第一个元素</returns>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.Last">
            <summary>
            获取最后一个元素
            </summary>
            <returns>最后一个元素</returns>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.Add(`0)">
            <summary>
            将元素插入到列表尾部
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.Push(`0)">
            <summary>
            将元素插入到列表尾部
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.UnShift(`0)">
            <summary>
            将元素插入到列表头部
            </summary>
            <param name="element">元素</param>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.Pop">
            <summary>
            移除并返回列表的尾部元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.Shift">
            <summary>
            移除并返回列表头部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.Trim(System.Int64,System.Int64)">
            <summary>
            对列表进行修剪，只保留下标范围内的元素
            </summary>
            <param name="start">起始下标(包含)</param>
            <param name="end">结束下标(包含)</param>
            <returns>移除的元素数量</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/>大于<paramref name="end"/>或者<paramref name="start"/>小于0时引发</exception>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.Remove(`0,System.Int64)">
            <summary>
            根据参数 <paramref name="count"/> 的值，移除列表中与参数 <paramref name="element"/> 相等的元素。
            <para><c>count &gt; 0</c> : 从表头开始向表尾搜索，移除与 <paramref name="element"/> 相等的元素，数量为 <paramref name="count"/>。</para>
            <para><c>count &lt; 0</c> : 从表尾开始向表头搜索，移除与 <paramref name="element"/> 相等的元素，数量为绝对值 <paramref name="count"/>。</para>
            <para><c>count = 0</c> : 移除表中所有与 <paramref name="element"/> 相等的元素。</para>
            </summary>
            <param name="element">要被移除的元素</param>
            <param name="count">移除的元素数量，使用正负来决定扫描起始位置，如果<paramref name="count"/>为0则全部匹配的元素，反之移除指定数量。</param>
            <returns>被移除元素的数量</returns>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.GetRange(System.Int64,System.Int64)">
            <summary>
            获取区间内的所有元素,1个元素占1个位置
            </summary>
            <param name="start">起始位置(包含)</param>
            <param name="end">结束位置(包含)</param>
            <returns>区间内的元素列表</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/>大于<paramref name="end"/>时引发</exception>
        </member>
        <member name="P:CatLib.Stl.QuickList`1.Item(System.Int64)">
            <summary>
            通过下标访问元素,如果传入的是一个负数下标那么从末尾开始查找
            </summary>
            <param name="index">下标，允许为负数</param>
            <returns>元素</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">下标越界时会引发</exception>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.InsertAfter(`0,`0)">
            <summary>
            在指定元素之后插入
            </summary>
            <param name="finder">查找的元素</param>
            <param name="insert">要插入的元素</param>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.InsertBefore(`0,`0)">
            <summary>
            在指定元素之前插入
            </summary>
            <param name="finder">查找的元素</param>
            <param name="insert">要插入的元素</param>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.ReverseForeach">
            <summary>
            反转遍历顺序(并不是反转整个列表)
            </summary>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.System#Collections#Generic#IEnumerable{TElement}#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.FindByIndex(System.Int64,System.Int32@)">
            <summary>
            根据下标查找元素,如果传入的是一个负数下标那么从末尾开始查找
            </summary>
            <param name="index">下标</param>
            <param name="offset">偏移量</param>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.Insert(`0,CatLib.Stl.QuickList{`0}.QuickListNode,System.Int32,System.Boolean)">
            <summary>
            插入元素
            </summary>
            <param name="insert">被插入的元素</param>
            <param name="after">是否在被查找的元素之后插入</param>
            <param name="node">需要插入的结点</param>
            <param name="offset">结点相对偏移量</param>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.AttemptMergeNode(CatLib.Stl.QuickList{`0}.QuickListNode)">
            <summary>
            尝试合并结点
            </summary>
            <param name="node">发起合并的结点</param>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.MergeNode(CatLib.Stl.QuickList{`0}.QuickListNode,CatLib.Stl.QuickList{`0}.QuickListNode,System.Boolean)">
            <summary>
            将从结点合并进主节点
            </summary>
            <param name="master">主结点</param>
            <param name="slave">从结点</param>
            <param name="after">从结点将怎么合并</param>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.AllowMerge(CatLib.Stl.QuickList{`0}.QuickListNode,CatLib.Stl.QuickList{`0}.QuickListNode)">
            <summary>
            是否允许进行合并
            </summary>
            <param name="a">结点</param>
            <param name="b">结点</param>
            <returns>是否可以合并</returns>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.SplitNode(CatLib.Stl.QuickList{`0}.QuickListNode,System.Int32,System.Boolean)">
            <summary>
            拆分结点
            </summary>
            <param name="node">要被拆分的结点</param>
            <param name="offset">拆分偏移量</param>
            <param name="after">前拆将会将offset之前的元素作为返回结点，后拆分则会将offset之后的元素作为返回结点</param>
            <returns>拆分出的结点</returns>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.FindNode(`0,System.Int32@)">
            <summary>
            查找元素所在结点
            </summary>
            <param name="element">元素</param>
            <param name="offset">偏移量</param>
            <returns>所在结点，如果找不到结点则返回null</returns>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.ListPop(CatLib.Stl.QuickList{`0}.QuickListNode,System.Boolean)">
            <summary>
            列表弹出数据
            </summary>
            <param name="node">结点</param>
            <param name="head">是否是头部</param>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.DeleteNode(CatLib.Stl.QuickList{`0}.QuickListNode)">
            <summary>
            删除结点
            </summary>
            <param name="node">结点</param>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.InsertNode(CatLib.Stl.QuickList{`0}.QuickListNode,CatLib.Stl.QuickList{`0}.QuickListNode,System.Boolean)">
            <summary>
            插入结点
            </summary>
            <param name="oldNode">旧的结点</param>
            <param name="newNode">新的结点</param>
            <param name="after">在旧的结点之前还是之后</param>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.MakeNode">
            <summary>
            创建结点
            </summary>
            <returns></returns>
        </member>
        <member name="M:CatLib.Stl.QuickList`1.AllowInsert(CatLib.Stl.QuickList{`0}.QuickListNode)">
            <summary>
            快速列表结点是否允许插入
            </summary>
            <param name="node">结点</param>
            <returns>是否可以插入</returns>
        </member>
        <member name="T:CatLib.Stl.SortSet`2">
            <summary>
            有序集
            有序集使用分数进行排序(以小到大)
            </summary>
        </member>
        <member name="T:CatLib.Stl.SortSet`2.SkipNode">
            <summary>
            跳跃结点
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.SkipNode.SkipNodeLevel.Forward">
            <summary>
            前一个结点
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.SkipNode.SkipNodeLevel.Span">
            <summary>
            层跨越的结点数量
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.SkipNode.Element">
            <summary>
            元素
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.SkipNode.Score">
            <summary>
            分数
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.SkipNode.Backward">
            <summary>
            向后的结点
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.SkipNode.Level">
            <summary>
            层级
            </summary>
        </member>
        <member name="T:CatLib.Stl.SortSet`2.Enumerator">
            <summary>
            有序集迭代器
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.Enumerator.sortSet">
            <summary>
            快速列表
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.Enumerator.forward">
            <summary>
            是否是向前遍历
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.Enumerator.current">
            <summary>
            当前节点
            </summary>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.Enumerator.#ctor(CatLib.Stl.SortSet{`0,`1},System.Boolean)">
            <summary>
            构造一个迭代器
            </summary>
            <param name="sortSet">有序集</param>
            <param name="forward">是否向前遍历</param>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.Enumerator.MoveNext">
            <summary>
            移动到下一个节点
            </summary>
            <returns>下一个节点是否存在</returns>
        </member>
        <member name="P:CatLib.Stl.SortSet`2.Enumerator.Current">
            <summary>
            获取当前元素
            </summary>
        </member>
        <member name="P:CatLib.Stl.SortSet`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            获取当前元素
            </summary>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            重置迭代器
            </summary>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.Enumerator.Dispose">
            <summary>
            释放时
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.syncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.forward">
            <summary>
            是否是向前的迭代方向
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.maxLevel">
            <summary>
            最大层数
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.dict">
            <summary>
            字典
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.level">
            <summary>
            当前拥有的层
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.header">
            <summary>
            跳跃表头结点
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.tail">
            <summary>
            尾部结点
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.probability">
            <summary>
            可能出现层数的概率
            </summary>
        </member>
        <member name="F:CatLib.Stl.SortSet`2.random">
            <summary>
            随机数发生器
            </summary>
        </member>
        <member name="P:CatLib.Stl.SortSet`2.Count">
            <summary>
            有序集的基数
            </summary>
        </member>
        <member name="P:CatLib.Stl.SortSet`2.SyncRoot">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.#ctor(System.Double,System.Int32)">
            <summary>
            创建一个有序集
            </summary>
            <param name="probable">可能出现层数的概率系数(0-1之间的数)</param>
            <param name="maxLevel">最大层数</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="probable"/>或<paramref name="maxLevel"/>不是有效值时引发</exception>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.Clear">
            <summary>
            清空SortSet
            </summary>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.ReverseForeach">
            <summary>
            反转遍历顺序(并不是反转整个有序集)
            </summary>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.System#Collections#Generic#IEnumerable{TElement}#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            迭代器
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.ToArray">
            <summary>
            转为数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.First">
            <summary>
            获取第一个元素
            </summary>
            <returns>最后一个元素</returns>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.Last">
            <summary>
            获取最后一个元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.Shift">
            <summary>
            移除并返回有序集头部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.Pop">
            <summary>
            移除并返回有序集尾部的元素
            </summary>
            <returns>元素</returns>
        </member>
        <member name="P:CatLib.Stl.SortSet`2.Item(System.Int64)">
            <summary>
            获取指定排名的元素(有序集成员按照Score从小到大排序)
            </summary>
            <param name="rank">排名,排名以0为底</param>
            <returns>指定的元素</returns>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.Add(`0,`1)">
            <summary>
            插入记录
            </summary>
            <param name="element">元素</param>
            <param name="score">分数</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>或<paramref name="score"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.Contains(`0)">
            <summary>
            是否包含某个元素
            </summary>
            <param name="element">元素</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.GetScore(`0)">
            <summary>
            返回有序集的分数
            </summary>
            <param name="element">元素</param>
            <returns>分数，如果元素不存在则返回<c>default(TScore)</c></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.GetRangeCount(`1,`1)">
            <summary>
            获取分数范围内的元素个数
            </summary>
            <param name="start">起始值(包含)</param>
            <param name="end">结束值(包含)</param>
            <returns>分数值在<paramref name="start"/>(包含)和<paramref name="end"/>(包含)之间的元素数量</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="start"/>和<paramref name="end"/>区间无效时引发</exception>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.Remove(`0)">
            <summary>
            从有序集中删除元素，如果元素不存在返回false
            </summary>
            <param name="element">元素</param>
            <returns>是否成功</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.RemoveRangeByRank(System.Int64,System.Int64)">
            <summary>
            根据排名区间移除区间内的元素
            </summary>
            <param name="startRank">开始的排名(包含),排名以0为底</param>
            <param name="stopRank">结束的排名(包含),排名以0为底</param>
            <returns>被删除的元素个数</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startRank"/>和<paramref name="stopRank"/>区间无效时引发</exception>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.RemoveRangeByScore(`1,`1)">
            <summary>
            根据分数区间移除区间内的元素
            </summary>
            <param name="startScore">开始的分数（包含）</param>
            <param name="stopScore">结束的分数（包含）</param>
            <returns>被删除的元素个数</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startScore"/>和<paramref name="stopScore"/>区间无效时引发</exception>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.GetRank(`0)">
            <summary>
            获取排名 , 有序集成员按照Score从小到大排序
            </summary>
            <param name="element">元素</param>
            <returns>排名排名以0为底，为-1则表示没有找到元素</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.GetRevRank(`0)">
            <summary>
            获取排名，有序集成员按照Score从大到小排序
            </summary>
            <param name="element"></param>
            <returns>排名排名以0为底 , 为-1则表示没有找到元素</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="element"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.GetElementRangeByRank(System.Int64,System.Int64)">
            <summary>
            根据排名区间获取区间内的所有元素
            </summary>
            <param name="startRank">开始的排名(包含),排名以0为底</param>
            <param name="stopRank">结束的排名(包含),排名以0为底</param>
            <returns>元素列表</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startRank"/>和<paramref name="stopRank"/>区间无效时引发</exception>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.GetElementRangeByScore(`1,`1)">
            <summary>
            根据分数区间获取区间内的所有元素
            </summary>
            <param name="startScore">开始的分数（包含）</param>
            <param name="stopScore">结束的分数（包含）</param>
            <returns>元素列表</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startScore"/>和<paramref name="stopScore"/>区间无效时引发</exception>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.GetElementByRank(System.Int64)">
            <summary>
            根据排名获取元素 (有序集成员按照Score从小到大排序)
            </summary>
            <param name="rank">排名,排名以0为底</param>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.GetElementByRevRank(System.Int64)">
            <summary>
            根据排名获取元素 (有序集成员按照Score从大到小排序)
            </summary>
            <param name="rank">排名,排名以0为底</param>
            <returns>元素</returns>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.AddElement(`0,`1)">
            <summary>
            插入记录
            </summary>
            <param name="element">元素</param>
            <param name="score">分数</param>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.Remove(CatLib.Stl.SortSet{`0,`1}.SkipNode,`0@)">
            <summary>
            移除元素
            </summary>
            <param name="node">节点</param>
            <param name="element">元素</param>
            <returns>移除的元素</returns>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.Remove(`0,`1)">
            <summary>
            如果元素存在那么从有序集中删除元素
            </summary>
            <param name="element">元素</param>
            <param name="score">分数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.GetRank(`0,`1)">
            <summary>
            获取元素排名
            </summary>
            <param name="element">元素</param>
            <param name="score">分数</param>
            <returns>排名，排名以0为底</returns>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.DeleteNode(CatLib.Stl.SortSet{`0,`1}.SkipNode,CatLib.Stl.SortSet{`0,`1}.SkipNode[])">
            <summary>
            删除结点关系
            </summary>
            <param name="cursor">结点</param>
            <param name="update">更新结点列表</param>
        </member>
        <member name="M:CatLib.Stl.SortSet`2.GetRandomLevel">
            <summary>
            获取随机层
            </summary>
            <returns>随机的层数</returns>
        </member>
        <member name="T:CatLib.Stl.Manager`1">
            <summary>
            管理器模版
            </summary>
        </member>
        <member name="F:CatLib.Stl.Manager`1.customResolve">
            <summary>
            自定义解决器
            </summary>
        </member>
        <member name="F:CatLib.Stl.Manager`1.defaultName">
            <summary>
            默认名字
            </summary>
        </member>
        <member name="M:CatLib.Stl.Manager`1.Get(System.String)">
            <summary>
            获取解决方案
            </summary>
            <param name="name">解决方案名</param>
            <returns>解决方案</returns>
        </member>
        <member name="P:CatLib.Stl.Manager`1.Item(System.String)">
            <summary>
            获取解决方案
            </summary>
            <param name="name">解决方案名</param>
            <returns>解决方案</returns>
        </member>
        <member name="M:CatLib.Stl.Manager`1.Extend(System.Func{`0},System.String)">
            <summary>
            自定义解决方案
            </summary>
            <param name="resolve">解决方案</param>
            <param name="name">名字</param>
        </member>
        <member name="M:CatLib.Stl.Manager`1.GetDefaultName">
            <summary>
            获取默认名字
            </summary>
            <returns>默认名字</returns>
        </member>
        <member name="M:CatLib.Stl.Manager`1.Resolve(System.String)">
            <summary>
            生成所需求的解决方案
            </summary>
            <param name="name">解决方案名</param>
            <returns>解决方案</returns>
        </member>
        <member name="T:CatLib.Stl.SingleManager`1">
            <summary>
            管理器模版（拓展解决方案为单例）
            </summary>
        </member>
        <member name="F:CatLib.Stl.SingleManager`1.elements">
            <summary>
            解决方案字典
            </summary>
        </member>
        <member name="M:CatLib.Stl.SingleManager`1.Get(System.String)">
            <summary>
            获取解决方案
            </summary>
            <param name="name">解决方案名</param>
            <returns>解决方案</returns>
        </member>
        <member name="P:CatLib.Stl.SingleManager`1.Default">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:CatLib.Stl.SingleManager`1.Item(System.String)">
            <summary>
            获取解决方案
            </summary>
            <param name="name">解决方案名</param>
            <returns>解决方案</returns>
        </member>
        <member name="M:CatLib.Stl.SingleManager`1.Release(System.String)">
            <summary>
            释放解决方案
            </summary>
            <param name="name">解决方案名</param>
        </member>
        <member name="M:CatLib.Stl.SingleManager`1.Make(System.String)">
            <summary>
            生成解决方案
            </summary>
            <param name="name">解决方案名</param>
            <returns>解决方案实现</returns>
        </member>
        <member name="T:CatLib.ContainerExpand">
            <summary>
             容器拓展
             </summary>
        </member>
        <member name="M:CatLib.ContainerExpand.Singleton(CatLib.API.Stl.IContainer,System.String,System.Func{CatLib.API.Stl.IContainer,System.Object[],System.Object})">
            <summary>
            以单例的形式绑定一个服务
            </summary>
            <param name="container">服务容器</param>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.ContainerExpand.Singleton``2(CatLib.API.Stl.IContainer)">
            <summary>
            以单例的形式绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <typeparam name="TConcrete">服务实现</typeparam>
            <param name="container">服务容器</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.ContainerExpand.Singleton``1(CatLib.API.Stl.IContainer)">
            <summary>
            以单例的形式绑定一个服务
            </summary>
            <typeparam name="TService">服务名，同时也是服务实现</typeparam>
            <param name="container">服务容器</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.ContainerExpand.Singleton``1(CatLib.API.Stl.IContainer,System.Func{CatLib.API.Stl.IContainer,System.Object[],System.Object})">
            <summary>
            以单例的形式绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.ContainerExpand.Bind``2(CatLib.API.Stl.IContainer)">
            <summary>
            常规绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <typeparam name="TConcrete">服务实现</typeparam>
            <param name="container">服务容器</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.ContainerExpand.Bind``1(CatLib.API.Stl.IContainer)">
            <summary>
            常规绑定一个服务
            </summary>
            <typeparam name="TService">服务名，同时也是服务实现</typeparam>
            <param name="container">服务容器</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.ContainerExpand.Bind``1(CatLib.API.Stl.IContainer,System.Func{CatLib.API.Stl.IContainer,System.Object[],System.Object})">
            <summary>
            常规绑定一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.ContainerExpand.Bind(CatLib.API.Stl.IContainer,System.String,System.Func{CatLib.API.Stl.IContainer,System.Object[],System.Object})">
            <summary>
            常规绑定一个服务
            </summary>
            <param name="container">服务容器</param>
            <param name="service">服务名</param>
            <param name="concrete">服务实现</param>
            <returns>服务绑定数据</returns>
        </member>
        <member name="M:CatLib.ContainerExpand.MakeParams``1(CatLib.API.Stl.IContainer,System.Object[])">
            <summary>
            构造一个服务，允许传入构造参数
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="param">构造参数</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:CatLib.ContainerExpand.Make``1(CatLib.API.Stl.IContainer)">
            <summary>
            构造一个服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:CatLib.ContainerExpand.Make``1(CatLib.API.Stl.IContainer,System.String)">
            <summary>
            构造一个服务
            </summary>
            <typeparam name="TConvert">服务实例转换到的类型</typeparam>
            <param name="container">服务容器</param>
            <param name="service">服务名</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:CatLib.ContainerExpand.Release``1(CatLib.API.Stl.IContainer)">
            <summary>
            释放服务
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
        </member>
        <member name="M:CatLib.ContainerExpand.Instance``1(CatLib.API.Stl.IContainer,System.Object)">
            <summary>
            静态化一个服务,实例值会经过解决修饰器
            </summary>
            <typeparam name="TService">服务名</typeparam>
            <param name="container">服务容器</param>
            <param name="instance">实例值</param>
        </member>
        <member name="T:CatLib.App">
            <summary>
            CatLib实例
            </summary>
        </member>
        <member name="F:CatLib.App.instance">
            <summary>
            CatLib实例
            </summary>
        </member>
        <member name="P:CatLib.App.Instance">
            <summary>
            CatLib实例
            </summary>
        </member>
        <member name="T:CatLib.Core.Application">
            <summary>
            CatLib程序
            </summary>
        </member>
        <member name="F:CatLib.Core.Application.VERSION">
            <summary>
            CatLib框架版本
            </summary>
        </member>
        <member name="P:CatLib.Core.Application.Version">
            <summary>
            CatLib版本号
            </summary>
        </member>
        <member name="T:CatLib.Core.Application.StartProcess">
            <summary>
            框架启动流程
            </summary>
        </member>
        <member name="F:CatLib.Core.Application.StartProcess.OnBootstrap">
            <summary>
            引导流程
            </summary>
        </member>
        <member name="F:CatLib.Core.Application.StartProcess.OnInit">
            <summary>
            初始化流程
            </summary>
        </member>
        <member name="F:CatLib.Core.Application.StartProcess.OnProviderProcess">
            <summary>
            服务提供商启动流程
            </summary>
        </member>
        <member name="F:CatLib.Core.Application.StartProcess.OnComplete">
            <summary>
            启动完成
            </summary>
        </member>
        <member name="F:CatLib.Core.Application.serviceProviders">
            <summary>
            服务提供商
            </summary>
        </member>
        <member name="F:CatLib.Core.Application.bootstrapped">
            <summary>
            是否已经完成引导程序
            </summary>
        </member>
        <member name="F:CatLib.Core.Application.inited">
            <summary>
            是否已经完成初始化
            </summary>
        </member>
        <member name="F:CatLib.Core.Application.process">
            <summary>
            启动流程
            </summary>
        </member>
        <member name="P:CatLib.Core.Application.Process">
            <summary>
            启动流程
            </summary>
        </member>
        <member name="F:CatLib.Core.Application.guid">
            <summary>
            全局唯一自增
            </summary>
        </member>
        <member name="M:CatLib.Core.Application.#ctor">
            <summary>
            构建一个CatLib实例
            </summary>
        </member>
        <member name="M:CatLib.Core.Application.#ctor(UnityEngine.Component)">
            <summary>
            构建一个CatLib实例
            </summary>
            <param name="behaviour">驱动脚本</param>
        </member>
        <member name="M:CatLib.Core.Application.Bootstrap(System.Type[])">
            <summary>
            引导程序
            </summary>
            <param name="bootstraps">引导程序</param>
            <returns>CatLib实例</returns>
            <exception cref="T:System.ArgumentNullException">当引导类型为null时引发</exception>
            <exception cref="T:CatLib.API.RuntimeException">当引导类型没有实现<see cref="T:CatLib.API.IBootstrap"/>时引发</exception>
        </member>
        <member name="M:CatLib.Core.Application.Init">
            <summary>
            初始化
            </summary>
            <exception cref="T:CatLib.API.RuntimeException">没有调用<c>Bootstrap(...)</c>就尝试初始化时触发</exception>
        </member>
        <member name="M:CatLib.Core.Application.Register(System.Type)">
            <summary>
            注册服务提供者
            </summary>
            <param name="t">注册类型</param>
            <exception cref="T:CatLib.API.RuntimeException">服务提供商被重复注册或者服务提供商没有继承自<see cref="T:CatLib.ServiceProvider"/></exception>
        </member>
        <member name="M:CatLib.Core.Application.GetGuid">
            <summary>
            获取一个唯一id
            </summary>
            <returns>应用程序内唯一id</returns>
        </member>
        <member name="M:CatLib.Core.Application.StartProviderPorcess">
            <summary>
            启动服务提供商启动流程
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="T:CatLib.Core.CoreProvider">
            <summary>
            核心服务提供商
            </summary>
        </member>
        <member name="M:CatLib.Core.CoreProvider.Register">
            <summary>
            注册核心服务提供商
            </summary>
        </member>
        <member name="T:CatLib.Core.Driver">
            <summary>
            Application行为驱动器
            </summary>
        </member>
        <member name="F:CatLib.Core.Driver.mainThreadDispatcherQueueLocker">
            <summary>
            主线程调度队列锁
            </summary>
        </member>
        <member name="F:CatLib.Core.Driver.update">
            <summary>
            更新
            </summary>
        </member>
        <member name="F:CatLib.Core.Driver.lateUpdate">
            <summary>
            延后更新
            </summary>
        </member>
        <member name="F:CatLib.Core.Driver.destroy">
            <summary>
            释放时需要调用的
            </summary>
        </member>
        <member name="F:CatLib.Core.Driver.loadSet">
            <summary>
            载入结果集
            </summary>
        </member>
        <member name="F:CatLib.Core.Driver.priority">
            <summary>
            优先标记
            </summary>
        </member>
        <member name="F:CatLib.Core.Driver.eventImpl">
            <summary>
            事件实体
            </summary>
        </member>
        <member name="P:CatLib.Core.Driver.EventSystem">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="F:CatLib.Core.Driver.mainThreadId">
            <summary>
            主线程ID
            </summary>
        </member>
        <member name="P:CatLib.Core.Driver.IsMainThread">
            <summary>
            是否是主线程
            </summary>
        </member>
        <member name="F:CatLib.Core.Driver.driverBehaviour">
            <summary>
            驱动脚本
            </summary>
        </member>
        <member name="F:CatLib.Core.Driver.mainThreadDispatcherQueue">
            <summary>
            主线程调度队列
            </summary>
        </member>
        <member name="M:CatLib.Core.Driver.#ctor">
            <summary>
            Application行为驱动器
            </summary>
        </member>
        <member name="M:CatLib.Core.Driver.#ctor(UnityEngine.Component)">
            <summary>
            Application行为驱动器
            </summary>
        </member>
        <member name="M:CatLib.Core.Driver.Initialization(UnityEngine.Component)">
            <summary>
            初始化
            </summary>
            <param name="mainBehavior">mono脚本</param>
        </member>
        <member name="M:CatLib.Core.Driver.UnLoad(System.Object)">
            <summary>
            从驱动器中卸载对象
            如果对象使用了增强接口，那么卸载对应增强接口
            从驱动器中卸载对象会引发IDestroy增强接口
            </summary>
            <param name="obj">对象</param>
            <exception cref="T:System.ArgumentNullException">当卸载对象为<c>null</c>时引发</exception>
        </member>
        <member name="M:CatLib.Core.Driver.Load(System.Object)">
            <summary>
            如果对象实现了增强接口那么将对象装载进对应驱动器
            在装载的时候会引发IStart接口
            </summary>
            <param name="obj">对象</param>
            <exception cref="T:System.ArgumentNullException">当装载对象为<c>null</c>时引发</exception>
        </member>
        <member name="M:CatLib.Core.Driver.GetPriorities(System.Type,System.String)">
            <summary>
            获取优先级
            </summary>
            <param name="type">识别的类型</param>
            <param name="method">识别的方法</param>
            <returns>优先级</returns>
        </member>
        <member name="M:CatLib.Core.Driver.Update">
            <summary>
            每帧更新
            </summary>
        </member>
        <member name="M:CatLib.Core.Driver.LateUpdate">
            <summary>
            每帧更新后
            </summary>
        </member>
        <member name="M:CatLib.Core.Driver.OnDestroy">
            <summary>
            当释放时
            </summary>
        </member>
        <member name="M:CatLib.Core.Driver.MainThread(System.Collections.IEnumerator)">
            <summary>
            在主线程中调用
            </summary>
            <param name="action">代码块执行会处于主线程</param>
        </member>
        <member name="M:CatLib.Core.Driver.MainThread(System.Action)">
            <summary>
            在主线程中调用
            </summary>
            <param name="action">代码块执行会处于主线程</param>
        </member>
        <member name="M:CatLib.Core.Driver.ActionWrapper(System.Action)">
            <summary>
            包装器
            </summary>
            <param name="action">回调函数</param>
            <returns>迭代器</returns>
        </member>
        <member name="M:CatLib.Core.Driver.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            启动协程
            </summary>
            <param name="routine">协程内容</param>
            <returns>协程</returns>
            <exception cref="T:System.ArgumentNullException">当<paramref name="routine"/>为<c>null</c>时引发</exception>
        </member>
        <member name="M:CatLib.Core.Driver.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            停止协程
            </summary>
            <param name="routine">协程</param>
            <exception cref="T:System.ArgumentNullException">当<paramref name="routine"/>为<c>null</c>时引发</exception>
        </member>
        <member name="P:CatLib.Core.Driver.Event">
            <summary>
            事件系统
            </summary>
        </member>
        <member name="M:CatLib.Core.Driver.TriggerGlobal(System.String)">
            <summary>
            触发一个全局事件
            </summary>
            <param name="eventName">事件名</param>
            <returns>全局事件</returns>
        </member>
        <member name="M:CatLib.Core.Driver.TriggerGlobal(System.String,System.Object)">
            <summary>
            触发一个全局事件
            </summary>
            <param name="eventName">事件名</param>
            <param name="sender">发送者</param>
            <returns>全局事件</returns>
        </member>
        <member name="M:CatLib.Core.Driver.Trigger(System.String)">
            <summary>
            触发一个事件
            </summary>
            <param name="eventName">事件名</param>
        </member>
        <member name="M:CatLib.Core.Driver.Trigger(System.String,System.EventArgs)">
            <summary>
            触发一个事件
            </summary>
            <param name="eventName">事件名</param>
            <param name="e">事件参数</param>
        </member>
        <member name="M:CatLib.Core.Driver.Trigger(System.String,System.Object)">
            <summary>
            触发一个事件
            </summary>
            <param name="eventName">事件名</param>
            <param name="sender">事件发送者</param>
        </member>
        <member name="M:CatLib.Core.Driver.Trigger(System.String,System.Object,System.EventArgs)">
            <summary>
            触发一个事件
            </summary>
            <param name="eventName">事件名</param>
            <param name="sender">事件发送者</param>
            <param name="e">事件参数</param>
        </member>
        <member name="M:CatLib.Core.Driver.On(System.String,System.EventHandler,System.Int32)">
            <summary>
            注册一个全局事件
            </summary>
            <param name="eventName">事件名</param>
            <param name="handler">事件回调</param>
            <param name="life">事件生命，当生命为0则自动释放</param>
            <returns>事件句柄</returns>
        </member>
        <member name="M:CatLib.Core.Driver.One(System.String,System.EventHandler)">
            <summary>
            注册一个一次性的全局事件
            </summary>
            <param name="eventName">事件名</param>
            <param name="handler">事件回调</param>
            <returns>事件句柄</returns>
        </member>
        <member name="T:CatLib.Core.DriverBehaviour">
            <summary>
            驱动脚本
            </summary>
        </member>
        <member name="F:CatLib.Core.DriverBehaviour.driver">
            <summary>
            驱动器
            </summary>
        </member>
        <member name="M:CatLib.Core.DriverBehaviour.Awake">
            <summary>
            Awake
            </summary>
        </member>
        <member name="M:CatLib.Core.DriverBehaviour.SetDriver(CatLib.Core.Driver)">
            <summary>
            设定驱动器
            </summary>
            <param name="driver">驱动器</param>
        </member>
        <member name="M:CatLib.Core.DriverBehaviour.Update">
            <summary>
            每帧更新时
            </summary>
        </member>
        <member name="M:CatLib.Core.DriverBehaviour.LateUpdate">
            <summary>
            在每帧更新时之后
            </summary>
        </member>
        <member name="M:CatLib.Core.DriverBehaviour.OnDestroy">
            <summary>
            当释放时
            </summary>
        </member>
        <member name="T:CatLib.Core.Env">
            <summary>
            环境
            </summary>
        </member>
        <member name="P:CatLib.Core.Env.DebugLevel">
            <summary>
            调试等级
            </summary>
        </member>
        <member name="F:CatLib.Core.Env.assetPath">
            <summary>
            资源路径
            </summary>
        </member>
        <member name="P:CatLib.Core.Env.AssetPath">
            <summary>
            系统资源路径
            <para>不同的调试等级下对应不同的资源路径</para>
            <para><c>DebugLevels.Prod</c> : 生产环境下将会为<c>Application.persistentDataPath</c>读写目录</para>
            <para><c>DebugLevels.Staging</c> : 仿真环境下将会为<c>StreamingAssets</c>文件夹</para>
            <para><c>DebugLevels.Dev</c> : 开发者环境下将会为<c>Application.dataPath</c>数据路径</para>
            <para>调试等级无论如何设置，脱离编辑器将自动使用<c>Application.persistentDataPath</c>读写目录</para>
            <para>如果开发者有手动设置资源路径，将使用开发者设置的路径</para>
            </summary>
        </member>
        <member name="P:CatLib.Core.Env.Platform">
            <summary>
            当前运行的平台(和编辑器所在平台有关)
            </summary>
        </member>
        <member name="P:CatLib.Core.Env.SwitchPlatform">
            <summary>
            当前所选的编译平台
            </summary>
        </member>
        <member name="M:CatLib.Core.Env.PlatformToName(System.Nullable{UnityEngine.RuntimePlatform})">
            <summary>
            将平台转为名字
            </summary>
            <param name="platform">平台名</param>
            <returns>转换后的名字</returns>
        </member>
        <member name="M:CatLib.Core.Env.#ctor">
            <summary>
            构造一个环境
            </summary>
        </member>
        <member name="M:CatLib.Core.Env.SetDebugLevel(CatLib.API.DebugLevels)">
            <summary>
            设定调试等级
            </summary>
            <param name="level">调试等级</param>
        </member>
        <member name="M:CatLib.Core.Env.SetAssetPath(System.String)">
            <summary>
            设定资源路径，开发者设定的资源路径会覆盖默认的资源路径策略
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="T:CatLib.Core.Facade`1">
            <summary>
            门面
            </summary>
        </member>
        <member name="P:CatLib.Core.Facade`1.Instance">
            <summary>
            门面实例
            </summary>
        </member>
        <member name="T:CatLib.Core.GlobalEvent">
            <summary>
            全局事件
            </summary>
        </member>
        <member name="F:CatLib.Core.GlobalEvent.sender">
            <summary>
            事件源
            </summary>
        </member>
        <member name="F:CatLib.Core.GlobalEvent.eventName">
            <summary>
            事件名称
            </summary>
        </member>
        <member name="F:CatLib.Core.GlobalEvent.classInterface">
            <summary>
            触发接口级事件的接口
            </summary>
        </member>
        <member name="F:CatLib.Core.GlobalEvent.eventLevel">
            <summary>
            事件广播级别
            </summary>
        </member>
        <member name="M:CatLib.Core.GlobalEvent.#ctor(System.String,System.Object)">
            <summary>
            构造一个全局事件
            </summary>
            <param name="eventName">事件名</param>
            <param name="sender">发送者</param>
        </member>
        <member name="M:CatLib.Core.GlobalEvent.AppendInterface``1">
            <summary>
            增加事件响应接口
            </summary>
            <typeparam name="T">接口类型</typeparam>
            <returns>全局事件实例</returns>
        </member>
        <member name="M:CatLib.Core.GlobalEvent.AppendInterface(System.Type)">
            <summary>
            增加事件响应接口
            </summary>
            <param name="t">接口类型</param>
            <returns>全局事件实例</returns>
        </member>
        <member name="M:CatLib.Core.GlobalEvent.SetEventLevel(CatLib.API.EventLevels)">
            <summary>
            设定事件等级
            </summary>
            <param name="level">事件等级</param>
            <returns>全局事件实例</returns>
        </member>
        <member name="M:CatLib.Core.GlobalEvent.Trigger(System.EventArgs)">
            <summary>
            触发一个全局事件
            </summary>
            <param name="args">事件参数</param>
            <exception cref="T:CatLib.API.RuntimeException">当事件名无效时引发</exception>
        </member>
        <member name="T:CatLib.ServiceProvider">
            <summary>
            服务提供者
            </summary>
        </member>
        <member name="M:CatLib.ServiceProvider.Init">
            <summary>
            服务提供商初始化
            </summary>
        </member>
        <member name="M:CatLib.ServiceProvider.OnProviderProcess">
            <summary>
            当服务提供商触发启动流程时
            </summary>
            <returns>迭代器</returns>
        </member>
        <member name="P:CatLib.ServiceProvider.App">
            <summary>
            CatLib实例
            </summary>
        </member>
        <member name="M:CatLib.ServiceProvider.Register">
            <summary>
            当注册服务提供商
            </summary>
        </member>
        <member name="T:CatLib.Util">
            <summary>
            公共方法
            </summary>
        </member>
        <member name="M:CatLib.Util.FindTypesWithInterface(System.Type)">
            <summary>
            查找实现接口的类型
            </summary>
            <param name="interfaceType">接口类型</param>
            <returns>实现接口的类型列表</returns>
        </member>
        <member name="M:CatLib.Util.StandardPath(System.String)">
            <summary>
            标准化路径
            </summary>
        </member>
        <member name="T:CatLib.Event.EventHandler">
            <summary>
            事件句柄
            </summary>
        </member>
        <member name="P:CatLib.Event.EventHandler.Target">
            <summary>
            监听对象
            </summary>
        </member>
        <member name="P:CatLib.Event.EventHandler.Handler">
            <summary>
            事件句柄
            </summary>
        </member>
        <member name="P:CatLib.Event.EventHandler.EventName">
            <summary>
            事件名
            </summary>
        </member>
        <member name="F:CatLib.Event.EventHandler.isCancel">
            <summary>
            是否取消事件
            </summary>
        </member>
        <member name="P:CatLib.Event.EventHandler.Life">
            <summary>
            剩余的调用次数
            </summary>
        </member>
        <member name="P:CatLib.Event.EventHandler.IsLife">
            <summary>
            事件是否是有效的
            </summary>
        </member>
        <member name="M:CatLib.Event.EventHandler.#ctor(CatLib.Event.EventImpl,System.String,System.EventHandler,System.Int32)">
            <summary>
            创建一个事件句柄
            </summary>
            <param name="target">事件监听对象</param>
            <param name="eventName">事件名</param>
            <param name="eventHandler">事件句柄</param>
            <param name="life">生命次数</param>
        </member>
        <member name="M:CatLib.Event.EventHandler.Cancel">
            <summary>
            撤销事件监听
            </summary>
            <returns>是否撤销成功</returns>
        </member>
        <member name="M:CatLib.Event.EventHandler.Call(System.Object,System.EventArgs)">
            <summary>
            激活事件
            </summary>
            <param name="sender">事件发送者</param>
            <param name="e">事件参数</param>
        </member>
        <member name="T:CatLib.Event.EventImpl">
            <summary>
            事件实现
            </summary>
        </member>
        <member name="P:CatLib.Event.EventImpl.App">
            <summary>
            应用程序
            </summary>
        </member>
        <member name="F:CatLib.Event.EventImpl.handlers">
            <summary>
            事件地图
            </summary>
        </member>
        <member name="M:CatLib.Event.EventImpl.Trigger(System.String)">
            <summary>
            触发一个事件
            </summary>
            <param name="eventName">事件名称</param>
        </member>
        <member name="M:CatLib.Event.EventImpl.Trigger(System.String,System.EventArgs)">
            <summary>
            触发一个事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="e">事件参数</param>
        </member>
        <member name="M:CatLib.Event.EventImpl.Trigger(System.String,System.Object)">
            <summary>
            触发一个事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="sender">发送者</param>
        </member>
        <member name="M:CatLib.Event.EventImpl.Trigger(System.String,System.Object,System.EventArgs)">
            <summary>
            触发一个事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="sender">发送者</param>
            <param name="e">事件参数</param>
        </member>
        <member name="M:CatLib.Event.EventImpl.On(System.String,System.EventHandler,System.Int32)">
            <summary>
            注册一个事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="handler">事件句柄</param>
            <param name="life">在几次后事件会被自动释放</param>
            <returns>事件句柄</returns>
        </member>
        <member name="M:CatLib.Event.EventImpl.One(System.String,System.EventHandler)">
            <summary>
            注册一个事件，调用一次后就释放
            </summary>
            <param name="eventName">事件名</param>
            <param name="handler">事件句柄</param>
            <returns></returns>
        </member>
        <member name="M:CatLib.Event.EventImpl.Off(CatLib.Event.EventHandler)">
            <summary>
            移除一个事件
            </summary>
            <param name="handler">操作句柄</param>
        </member>
        <member name="M:CatLib.Event.EventImpl.On(System.String,CatLib.Event.EventHandler)">
            <summary>
            注册事件
            </summary>
            <param name="eventName">事件名</param>
            <param name="handler">事件句柄</param>
        </member>
        <member name="M:CatLib.Event.EventImpl.CallEvent(System.Collections.Generic.IList{CatLib.Event.EventHandler},System.Object,System.EventArgs)">
            <summary>
            调用事件
            </summary>
            <param name="handler">事件</param>
            <param name="sender">发送者</param>
            <param name="e">事件参数</param>
        </member>
        <member name="T:CatLib.Event.EventProvider">
            <summary>
            事件服务
            </summary>
        </member>
        <member name="M:CatLib.Event.EventProvider.Register">
            <summary>
            注册事件服务
            </summary>
        </member>
        <member name="T:CatLib.Timer.Timer">
            <summary>
            计时器
            </summary>
        </member>
        <member name="T:CatLib.Timer.Timer.TimerArgs">
            <summary>
            计时器参数
            </summary>
        </member>
        <member name="P:CatLib.Timer.Timer.TimerArgs.Type">
            <summary>
            任务类型
            </summary>
        </member>
        <member name="P:CatLib.Timer.Timer.TimerArgs.IntArgs">
            <summary>
            整型参数
            </summary>
        </member>
        <member name="P:CatLib.Timer.Timer.TimerArgs.FloatArgs">
            <summary>
            浮点型参数
            </summary>
        </member>
        <member name="P:CatLib.Timer.Timer.TimerArgs.FuncBoolArg">
            <summary>
            布尔回调函数
            </summary>
        </member>
        <member name="F:CatLib.Timer.Timer.task">
            <summary>
            任务行为
            </summary>
        </member>
        <member name="F:CatLib.Timer.Timer.args">
            <summary>
            计时器参数
            </summary>
        </member>
        <member name="F:CatLib.Timer.Timer.isComplete">
            <summary>
            当前计时器是否已经被完成
            </summary>
        </member>
        <member name="P:CatLib.Timer.Timer.Queue">
            <summary>
            计时器队列
            </summary>
        </member>
        <member name="M:CatLib.Timer.Timer.#ctor(CatLib.API.Timer.ITimerQueue,System.Action)">
            <summary>
            创建一个计时器
            </summary>
            <param name="task">任务实现</param>
            <param name="queue">当前逻辑帧</param>
            <returns>执行的任务</returns>
        </member>
        <member name="M:CatLib.Timer.Timer.Delay(System.Single)">
            <summary>
            延迟指定时间后执行
            </summary>
            <param name="time">延迟时间(秒)</param>
        </member>
        <member name="M:CatLib.Timer.Timer.DelayFrame(System.Int32)">
            <summary>
            延迟指定帧数帧后执行
            </summary>
            <param name="frame">帧数</param>
        </member>
        <member name="M:CatLib.Timer.Timer.Loop(System.Single)">
            <summary>
            循环执行指定时间
            </summary>
            <param name="time">循环时间(秒)</param>
        </member>
        <member name="M:CatLib.Timer.Timer.Loop(System.Func{System.Boolean})">
            <summary>
            循环执行，直到函数返回false
            </summary>
            <param name="callback">循环状态函数</param>
        </member>
        <member name="M:CatLib.Timer.Timer.LoopFrame(System.Int32)">
            <summary>
            循环执行指定帧数
            </summary>
            <param name="frame">循环执行的帧数</param>
        </member>
        <member name="M:CatLib.Timer.Timer.Interval(System.Single)">
            <summary>
            间隔多少时间执行一次
            </summary>
            <param name="time">间隔的时间</param>
        </member>
        <member name="M:CatLib.Timer.Timer.IntervalFrame(System.Int32)">
            <summary>
            间隔多少帧执行一次
            </summary>
            <param name="frame">间隔的帧数</param>
        </member>
        <member name="M:CatLib.Timer.Timer.Tick(System.Single@)">
            <summary>
            触发计时器
            </summary>
            <param name="deltaTime">上一帧到当前帧的时间(秒)</param>
            <returns>当前计时器是否完成了任务</returns>
        </member>
        <member name="M:CatLib.Timer.Timer.ExecTask(System.Single@)">
            <summary>
            执行任务
            </summary>
            <param name="deltaTime">上一帧到当前帧的时间(秒)</param>
            <returns>计时器是否已经完成</returns>
        </member>
        <member name="M:CatLib.Timer.Timer.TaskDelayFrame(CatLib.Timer.Timer,System.Single@)">
            <summary>
            延迟帧执行
            </summary>
            <param name="timer">计时器</param>
            <param name="deltaTime">上一帧到当前帧的时间(秒)</param>
            <returns>是否完成</returns>
        </member>
        <member name="M:CatLib.Timer.Timer.TaskDelayTime(CatLib.Timer.Timer,System.Single@)">
            <summary>
            延迟时间执行
            </summary>
            <param name="timer">计时器</param>
            <param name="deltaTime">上一帧到当前帧的时间(秒)</param>
            <returns>是否完成</returns>
        </member>
        <member name="M:CatLib.Timer.Timer.TaskLoopFunc(CatLib.Timer.Timer,System.Single@)">
            <summary>
            根据函数结果决定是否循环
            </summary>
            <param name="timer">计时器</param>
            <param name="deltaTime">上一帧到当前帧的时间(秒)</param>
            <returns>是否完成</returns>
        </member>
        <member name="M:CatLib.Timer.Timer.TaskLoopTime(CatLib.Timer.Timer,System.Single@)">
            <summary>
            循环执行指定的时间
            </summary>
            <param name="timer">计时器</param>
            <param name="deltaTime">上一帧到当前帧的时间(秒)</param>
            <returns>是否完成</returns>
        </member>
        <member name="M:CatLib.Timer.Timer.TaskLoopFrame(CatLib.Timer.Timer,System.Single@)">
            <summary>
            循环执行指定帧数
            </summary>
            <param name="timer">计时器</param>
            <param name="deltaTime">一帧的时间</param>
            <returns>是否完成</returns>
        </member>
        <member name="M:CatLib.Timer.Timer.TaskInterval(CatLib.Timer.Timer,System.Single@)">
            <summary>
            间隔指定时间执行
            </summary>
            <param name="timer">计时器</param>
            <param name="deltaTime">一帧的时间</param>
            <returns>是否完成</returns>
        </member>
        <member name="M:CatLib.Timer.Timer.TaskIntervalFrame(CatLib.Timer.Timer,System.Single@)">
            <summary>
            间隔指定时间执行
            </summary>
            <param name="timer">计时器</param>
            <param name="deltaTime">一帧的时间</param>
            <returns>是否完成</returns>
        </member>
        <member name="M:CatLib.Timer.Timer.GuardComplete(System.String)">
            <summary>
            检测完成状态
            </summary>
            <param name="func">函数名</param>
        </member>
        <member name="T:CatLib.Timer.TimerQueue">
            <summary>
            计时器队列
            </summary>
        </member>
        <member name="P:CatLib.Timer.TimerQueue.IsPause">
            <summary>
            是否是暂停的
            </summary>
        </member>
        <member name="F:CatLib.Timer.TimerQueue.time">
            <summary>
            时间实现
            </summary>
        </member>
        <member name="F:CatLib.Timer.TimerQueue.timers">
            <summary>
            计时器列表
            </summary>
        </member>
        <member name="F:CatLib.Timer.TimerQueue.onComplete">
            <summary>
            当队列中的所有任务完成时
            </summary>
        </member>
        <member name="F:CatLib.Timer.TimerQueue.cursor">
            <summary>
            游标,确定了当前执行的timer位置
            </summary>
        </member>
        <member name="F:CatLib.Timer.TimerQueue.frame">
            <summary>
            构建时间组时的逻辑帧
            </summary>
        </member>
        <member name="P:CatLib.Timer.TimerQueue.IsComplete">
            <summary>
            当前计时器队列是否完成的
            </summary>
        </member>
        <member name="M:CatLib.Timer.TimerQueue.#ctor(CatLib.API.Time.ITime)">
            <summary>
            构建一个计时器队列
            </summary>
            <param name="time">时间实现</param>
        </member>
        <member name="M:CatLib.Timer.TimerQueue.OnComplete(System.Action)">
            <summary>
            当组的所有计时器完成时
            </summary>
            <param name="onComplete">完成时</param>
            <returns>当前组实例</returns>
        </member>
        <member name="M:CatLib.Timer.TimerQueue.Tick">
            <summary>
            触发计时器
            </summary>
            <returns>计时器队列是否已经完成</returns>
        </member>
        <member name="M:CatLib.Timer.TimerQueue.Add(CatLib.Timer.Timer)">
            <summary>
            将计时器加入队列
            </summary>
            <param name="timer">计时器</param>
        </member>
        <member name="M:CatLib.Timer.TimerQueue.GetTimer">
            <summary>
            获取计时器
            </summary>
            <returns>计时器</returns>
        </member>
        <member name="M:CatLib.Timer.TimerQueue.GuardComplete(System.String)">
            <summary>
            检测完成状态
            </summary>
            <param name="func">函数名</param>
        </member>
        <member name="T:CatLib.Timer.TimerManager">
            <summary>
            计时器管理器
            </summary>
        </member>
        <member name="F:CatLib.Timer.TimerManager.timeManager">
            <summary>
            时间管理器
            </summary>
        </member>
        <member name="F:CatLib.Timer.TimerManager.executeList">
            <summary>
            运行列表
            </summary>
        </member>
        <member name="F:CatLib.Timer.TimerManager.timerQueue">
            <summary>
            路由器组
            </summary>
        </member>
        <member name="M:CatLib.Timer.TimerManager.#ctor(CatLib.API.Time.ITimeManager)">
            <summary>
            构建一个计时器管理器
            </summary>
            <param name="timeManager">时间管理器</param>
        </member>
        <member name="M:CatLib.Timer.TimerManager.Make(System.Action)">
            <summary>
            创建一个计时器
            </summary>
            <param name="task">计时器执行的任务</param>
            <returns>计时器</returns>
        </member>
        <member name="M:CatLib.Timer.TimerManager.MakeQueue(System.Action,System.Int32)">
            <summary>
            创建一个计时器队列
            </summary>
            <param name="area">在这个区域中Make的计时器会按照Make顺序加入同一个队列</param>
            <param name="priority">优先级(值越小越优先)</param>
            <returns>计时器队列</returns>
        </member>
        <member name="M:CatLib.Timer.TimerManager.Cancel(CatLib.API.Timer.ITimerQueue)">
            <summary>
            停止计时器队列的运行
            </summary>
            <param name="queue">计时器队列</param>
        </member>
        <member name="M:CatLib.Timer.TimerManager.Pause(CatLib.API.Timer.ITimerQueue)">
            <summary>
            暂停计时器队列
            </summary>
            <param name="queue">计时器队列</param>
        </member>
        <member name="M:CatLib.Timer.TimerManager.Play(CatLib.API.Timer.ITimerQueue)">
            <summary>
            重新开始播放计时器队列
            </summary>
            <param name="queue">计时器队列</param>
        </member>
        <member name="M:CatLib.Timer.TimerManager.Update">
            <summary>
            每帧更新
            </summary>
        </member>
        <member name="T:CatLib.Timer.TimerProvider">
            <summary>
            计时器服务
            </summary>
        </member>
        <member name="M:CatLib.Timer.TimerProvider.Register">
            <summary>
            注册计时器服务
            </summary>
        </member>
        <member name="T:CatLib.Timer.TimerTypes">
            <summary>
            时间任务类型
            </summary>
        </member>
        <member name="F:CatLib.Timer.TimerTypes.DelayTime">
            <summary>
            延迟时间执行
            </summary>
        </member>
        <member name="F:CatLib.Timer.TimerTypes.DelayFrame">
            <summary>
            延迟帧数执行
            </summary>
        </member>
        <member name="F:CatLib.Timer.TimerTypes.LoopTime">
            <summary>
            循环执行指定时间
            </summary>
        </member>
        <member name="F:CatLib.Timer.TimerTypes.LoopFunc">
            <summary>
            循环执行直到函数返回false
            </summary>
        </member>
        <member name="F:CatLib.Timer.TimerTypes.LoopFrame">
            <summary>
            循环执行指定帧数
            </summary>
        </member>
        <member name="F:CatLib.Timer.TimerTypes.Interval">
            <summary>
            间隔指定时间执行
            </summary>
        </member>
        <member name="F:CatLib.Timer.TimerTypes.IntervalFrame">
            <summary>
            间隔指定帧执行
            </summary>
        </member>
        <member name="T:CatLib.Time.TimeManager">
            <summary>
            时间服务管理器
            时间服务允许获取一个或者多个不同类型的时间
            </summary>
        </member>
        <member name="F:CatLib.Time.TimeManager.configManager">
            <summary>
            配置
            </summary>
        </member>
        <member name="M:CatLib.Time.TimeManager.#ctor(CatLib.API.Config.IConfigManager)">
            <summary>
            文件系统管理器
            </summary>
            <param name="configManager">配置管理器</param>
        </member>
        <member name="P:CatLib.Time.TimeManager.Time">
            <summary>
            从游戏开始到现在所用的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.Time.TimeManager.DeltaTime">
            <summary>
            上一帧到当前帧的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.Time.TimeManager.FixedTime">
            <summary>
            从游戏开始到现在的时间（秒）使用固定时间来更新
            </summary>
        </member>
        <member name="P:CatLib.Time.TimeManager.TimeSinceLevelLoad">
            <summary>
            从当前scene开始到目前为止的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.Time.TimeManager.FixedDeltaTime">
            <summary>
            固定的上一帧到当前帧的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.Time.TimeManager.MaximumDeltaTime">
            <summary>
            能获取最大的上一帧到当前帧的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.Time.TimeManager.SmoothDeltaTime">
            <summary>
            平稳的上一帧到当前帧的时间(秒)，根据前N帧的加权平均值
            </summary>
        </member>
        <member name="P:CatLib.Time.TimeManager.TimeScale">
            <summary>
            时间缩放系数
            </summary>
        </member>
        <member name="P:CatLib.Time.TimeManager.FrameCount">
            <summary>
            总帧数
            </summary>
        </member>
        <member name="P:CatLib.Time.TimeManager.RealtimeSinceStartup">
            <summary>
            自游戏开始后的总时间（暂停也会增加）
            </summary>
        </member>
        <member name="P:CatLib.Time.TimeManager.CaptureFramerate">
            <summary>
            每秒的帧率
            </summary>
        </member>
        <member name="P:CatLib.Time.TimeManager.UnscaledDeltaTime">
            <summary>
            不考虑时间缩放上一帧到当前帧的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.Time.TimeManager.UnscaledTime">
            <summary>
            不考虑时间缩放的从游戏开始到现在的时间
            </summary>
        </member>
        <member name="M:CatLib.Time.TimeManager.GetDefaultName">
            <summary>
            获取默认的文件系统名字
            </summary>
            <returns>默认的文件系统名字</returns>
        </member>
        <member name="T:CatLib.Time.TimeProvider">
            <summary>
            时间服务
            </summary>
        </member>
        <member name="M:CatLib.Time.TimeProvider.Register">
            <summary>
            注册时间服务
            </summary>
        </member>
        <member name="M:CatLib.Time.TimeProvider.RegisterTimeManager">
            <summary>
            注册时间服务管理器
            </summary>
        </member>
        <member name="T:CatLib.Time.UnityTime">
            <summary>
            Unity时间系统
            </summary>
        </member>
        <member name="P:CatLib.Time.UnityTime.Time">
            <summary>
            从游戏开始到现在所用的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.Time.UnityTime.DeltaTime">
            <summary>
            上一帧到当前帧的时间(秒)
            </summary>
        </member>
        <member name="P:CatLib.Time.UnityTime.FixedTime">
            <summary>
            从游戏开始到现在的时间（秒）使用固定时间来更新
            </summary>
        </member>
        <member name="P:CatLib.Time.UnityTime.TimeSinceLevelLoad">
            <summary>
            从当前scene开始到目前为止的时间（秒）
            </summary>
        </member>
        <member name="P:CatLib.Time.UnityTime.FixedDeltaTime">
            <summary>
            固定的更新时间（秒）
            </summary>
        </member>
        <member name="P:CatLib.Time.UnityTime.MaximumDeltaTime">
            <summary>
            能获取的最大更新时间
            </summary>
        </member>
        <member name="P:CatLib.Time.UnityTime.SmoothDeltaTime">
            <summary>
            平稳的更新时间，根据前N帧的加权平均值
            </summary>
        </member>
        <member name="P:CatLib.Time.UnityTime.TimeScale">
            <summary>
            时间缩放系数
            </summary>
        </member>
        <member name="P:CatLib.Time.UnityTime.FrameCount">
            <summary>
            总帧数
            </summary>
        </member>
        <member name="P:CatLib.Time.UnityTime.RealtimeSinceStartup">
            <summary>
            自游戏开始后的总时间（暂停也会增加）
            </summary>
        </member>
        <member name="P:CatLib.Time.UnityTime.CaptureFramerate">
            <summary>
            每秒的帧率
            </summary>
        </member>
        <member name="P:CatLib.Time.UnityTime.UnscaledDeltaTime">
            <summary>
            不考虑时间缩放的更新时间
            </summary>
        </member>
        <member name="P:CatLib.Time.UnityTime.UnscaledTime">
            <summary>
            不考虑时间缩放的从游戏开始到现在的时间
            </summary>
        </member>
    </members>
</doc>
